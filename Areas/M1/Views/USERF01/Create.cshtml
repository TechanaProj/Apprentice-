@model USERFORM.ViewModels.USERF01ViewModel
@{
    ViewData["Title"] = "Create";
    // Layout = "~/Views/Shared/_Layout.cshtml";
}


<!-- Add Bootstrap CSS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

<!-- Add Bootstrap JavaScript and jQuery (Popper.js is required for some Bootstrap components) -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.min.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/popper.js@2.11.6/dist/umd/popper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>


<!DOCTYPE html>
<html>
<head>
    <title>Tabbed Application Form with Step Completion</title>
    <style>

        /* Style for the label */
        label {
            font-weight: bold;
            font-family: 'Cambaria', sans-serif; /* Replace 'Cambaria' with the actual font name */
        }


        /* Style for the placeholder text */
        ::placeholder {
            color: #666; /* Set a slightly darker color for the placeholder text */
            font-style: normal; /* Italicize the placeholder text */
            font-weight: normal; /* Set normal font weight */
            font-size: 14px; /* Adjust the font size */
            text-align: center; /* Center the placeholder text */
            opacity: 0.8; /* Reduce the opacity for a subtle effect */
            /* You can add more styles based on your preferences */
        }


        .same-as-permanent {
            background-color: lightgray; /* Set your desired background color */
        }
        /* Add a border at the bottom of the first row */
        .custom-line {
            background: linear-gradient(to right, #e74c3c, #f39c12, #3498db, #2ecc71, #9b59b6);
            height: 3px;
            border: none;
            margin-bottom: 20px;
            animation: glow 1s ease-in-out infinite alternate;
        }

        .card {
            margin: 20px 0;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }




        /* /* Style for the body to make it full screen */
        body {
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            align-items: center;
            background-color: #f2f2f2;
        }

        /* Style for the header bar */
        /* Style for the header image */


        /* Style for the header bar */
        .header-bar {
            background-color: #4CAF50;
            width: 100%;
            height: 90px;
            display: flex;
            align-items: center;
            justify-content: center; /* Align content to the left */
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }



        /* Style for the header text */
        .header-text {
            color: white;
            font-size: 40px;
            font-weight: bold;
            font-family: "Roboto", "Arial", sans-serif;
        }


        /* Style for tabs container */
        .tabs-container {
            width: 62.5%; /* Adjust the width as needed */
            background-color: white;
            border-radius: 1px;
            padding: 20px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            margin-top: 10px; /* Adjust the margin as needed */
        }

        .container {
            /* Adjust the width as needed */
            height: 1500px; /* Adjust the height as needed */
            background-color: white;
            border-radius: 1px;
            padding: 20px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            margin-top: 10px; /* Adjust the margin as needed */
        }

        /* Rest of your existing styles for tabs, buttons, etc. */
        .tab {
            display: none;
        }

        /*Style for active tab */
        .active-tab {
            display: block;
        }

        /* Style for tab buttons */
        .tab-button-container {
            display: flex;
            height: 40px;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 20px;
        }

        .tab-button {
            cursor: pointer;
            padding: 25px; /* Increased button size */

            background-color: #f2f2f2;
            border: 5px solid #ccc;
            border-radius: 25%; /* Makes buttons circular */
        }

        .line {
            flex: 1;
            border-top: 1px solid #ccc;
        }

        /* Style for completed tab buttons */
        .completed-button {
            background-color: #4CAF50; /* Green color for completed steps */
            color: white;
        }

        /* Style for active tab button */
        /*  .active-button {
                                                            background-color: #ddd;
                                                        }*/

        /* Style for the form container */
        .form-container {
            margin-top: 10px;
        }

        /*/ Style for the navigation buttons */
        .navigation-buttons {
            text-align: center;
            margin-top: 60px;
        }


        /* Style for the header image */
        /* Style for the header image */
        .header-image {
            width: 175px; /* Adjust the width as needed */
            height: 77px; /* Adjust the height as needed */
            position: absolute;
            top: 5px;
            left: 10px;
        }

        /* Define a CSS class for a row containing three form fields */


        /* Add similar styles for other form elements if needed */ */
        /* Define a CSS class for an orange button */
        .orange-button {
            background-color: orange;
            color: bisque; /* Text color */
            border: none; /* Remove the border */
            padding: 10px 20px; /* Add some padding for spacing */
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 16px;
            margin: 4px 2px;
            cursor: pointer;
            border-radius: 4px; /* Rounded corners */
        }

        /* Style the button on hover */
        .orange-button:hover {
            background-color: darkorange; /* Change color on hover */
        }

        .sub-heading1.sub-heading2 {
            border: 2px solid skyblue; /* Add a solid sky blue border */
            background-color: deepskyblue; /* Fill the background with sky blue */
            color: white; /* Set the text color to white */
            padding: 5px 10px; /* Add some padding for spacing */
            border-radius: 10px; /* Round the corners (adjust the value as needed) */
        }

        /* Add new styles for dark mode */
        body.dark-mode {
            background-color: #333;
            color: #fff;
        }

        /* Add new styles for eye-safe mode */
        body.eyesafe-mode {
            background-color: #f7f7f7;
            color: #333;
        }

        /* Style for moon and sun icons */
        .moon-icon,
        .sun-icon {
            font-size: 20px;
        }
    </style>
</head>
<body>


    <div class="header-bar">

        <img src="~/images/iffcoGImg.jpg" alt="Header Image" class="header-image">
        <div class="header-text">Welcome to the online application in IFFCO Aonla Unit</div>
    </div>


    <div class="tabs-container">
        <div class="tab-button-container">
            <div class="tab-button active-button" id="tab1-button" onclick="openTab('tab1')">1</div>
            <div class="line"></div>
            <div class="tab-button" id="tab2-button" onclick="openTab('tab2')">2</div>
            <div class="line"></div>

            <div class="tab-button" id="tab3-button" onclick="openTab('tab3')">3</div>
            <div class="line"></div>
            <div class="tab-button" id="tab4-button" onclick="openTab('tab4')">4</div>

        </div>
    </div>
    <div class="container ">
        <form id="CreateForm" asp-controller="USERF01" asp-action="Create" onsubmit="return Validate();" method="post">
            <div id="tab1" class="tab active-tab">
                <!-- Content for Tab 1 -->
                <h3 class="sub-heading1 sub-heading2"><span>PERSONAL DETAILS</span></h3>

                <div class="row form-sm">
                    <div class="col-sm-2 col-md-4">

                        <label for="PostAppliedDescription">Post Selection</label>
                        <select class="form-control"  id="PostAppliedDescription" asp-for="objAtrmsPersonalDtl.PostAppliedDescription" asp-items="@(new SelectList(Model.PostdescriptionLOVBind,"Value","Text"))"></select>
                        <input type="hidden" id="PostAppliedCode" asp-for="@Model.objAtrmsPersonalDtl.PostAppliedCode" />
                        <input type="hidden" id="RecCode" asp-for="@Model.objAtrmsPersonalDtl.RecCode" />


                    </div>
                    <div class="col-sm-2 col-md-4">
                        <label for="Qualification">Hightest Qualification</label>
                        <input type="text" class="form-control " id="Qualification" placeholder="Enter Your Highest Qualification" asp-for="@Model.objAtrmsPersonalDtl.Qualification" oninput="this.value = this.value.toUpperCase(); validateName(this)">

                    </div>


                </div>
                <br>
                <div class="custom-line"></div>
                <div class="row form-sm">


                    <div class="col-sm-2 col-md-4">
                        <label for="FIRST_NAME">First Name</label>
                        <input type="text" id="txtName" class="form-control" placeholder="Enter First Name" />
                        <div class="text-danger validation-error" id="nameError" style="display: none;">Please Enter Name!</div>
                    </div>
                    <div class="col-sm-2 col-md-4">
                        <label for="MIDDLE_NAME">Middle Name</label>
                        <input type="text" class="form-control" id="MIDDLE_NAME" placeholder="Enter Middle Name">

                    </div>
                    <div class="col-sm-2 col-md-4">
                        <label for="LAST_NAME">Last Name</label>
                        <input type="text" class="form-control" id="txtLASTNAME" placeholder="Enter Last Name" required>
                        <div class="text-danger validation-error" id="lastnameError" style="display: none;">Please Enter Last Name!</div>

                    </div>
                </div>
                <br />
                <div class="row form-sm">
                    <div class="col-sm-2 col-md-4">
                        <label for="FATHER_NAME">Father's Name</label>
                        <input type="text" class="form-control" id="FATHER_NAME" placeholder="Enter Last Name" required>
                        <div class="text-danger validation-error" id="fathernameError" style="display: none;">Please Enter Father Name!</div>
                    </div>
                    <div class="col-sm-2 col-md-4">
                        <label for="FATHER_OCCUPATION">Father's Occupation</label>
                        <input type="text" class="form-control" id="FATHER_OCCUPATION" placeholder="Enter Father Occupation" required>
                        <div class="text-danger validation-error" id="fatheroccupationError" style="display: none;">Please Enter Father Occupation!</div>
                    </div>
                    <div class="col-sm-2 col-md-4">
                        <label for="MOTHER_NAME">Mother's Name</label>
                        <input type="text" class="form-control" id="MOTHER_NAME" placeholder="Enter Mother Name" required>
                        <div class="text-danger validation-error" id="mothernameError" style="display: none;">Please Enter Mother Name!</div>
                    </div>
                    <div class="col-sm-2 col-md-4">
                        <label for="MOTHER_OCCUPATION">Mother's Occupation</label>
                        <input type="text" class="form-control" id="MOTHER_OCCUPATION" placeholder="Enter Mother Occupation" required>
                    </div>
                    <div class="col-sm-2 col-md-4">
                        <label for="DATE_OF_BIRTH">Date of Birth</label>
                        <input type="date" class="form-control" id="DATE_OF_BIRTH" required>
                        <div class="text-danger validation-error" id="dateofbirthError" style="display: none;">Please Enter Date of Birth!</div>
                    </div>
                    <div class="col-sm-2 col-md-4">
                        <label for="BIRTH_PLACE">Birth Place</label>
                        <input type="text" class="form-control" id="BIRTH_PLACE" placeholder="Enter Birth Place">
                        <div class="text-danger validation-error" id="birthplaceError" style="display: none;">Please Enter Birth Place!</div>
                    </div>
                </div>
                <br />
                <div class="row form-sm">
                    <div class="col-sm-2 col-md-4">
                        <label for="GENDER">Gender</label>
                        <div class="input-group">
                            <select class="form-control" id="GENDER" required>
                                <option value="select" selected>SELECT GENDER</option>
                                <option value="MALE">MALE</option>
                                <option value="FEMALE">FEMALE</option>
                                <option value="OTHER">OTHER</option>
                            </select>

                        </div>
                        <div class="text-danger validation-error" id="genderError" style="display: none;">Please Select Gender!</div>
                    </div>

                    <div class="col-sm-2 col-md-4">
                        <label for="CATEGORY">Category</label>
                        <select class="form-control" id="CATEGORY" required>
                            <option value="" disabled selected>Select Category</option>
                            <option value="GENERAL">GENERAL</option>
                            <option value="OBC">OBC</option>
                            <option value="SC">SC</option>
                            <option value="ST">ST</option>
                            <option value="OTHER">OTHER</option>
                        </select>
                        <div class="text-danger validation-error" id="categoryError" style="display: none;">Please Select Category!</div>
                    </div>
                    <div class="col-sm-2 col-md-4">
                        <label for="NATIONALITY">Nationality</label>
                        <input type="text" class="form-control" id="NATIONALITY" placeholder="Enter Nationality" required>
                        <div class="text-danger validation-error" id="nationalityError" style="display: none;">Please Enter Nationality!</div>
                    </div>
                </div>
                <br />
                <div class="row form-sm">

                    <div class="col-sm-2 col-md-4">
                        <label for="IDENTIFICATION_MARK">Identification Mark</label>
                        <input type="text" class="form-control" id="IDENTIFICATION_MARK" placeholder="Enter Identification Marks">
                    </div>
                    <div class="col-sm-2 col-md-4">
                        <label for="AADHAR_NO">Aadhar Number</label>
                        <input type="text" class="form-control" id="AADHAR_NO" required placeholder="Enter Aadhar No">
                        <div class="text-danger validation-error" id="aadharnoError" style="display: none;">Please Enter Valid AadharNo!</div>
                    </div>
                </div>
                <br />
                <div class="row form-sm">
                    <div class="col-sm-2 col-md-4">
                        <label for="EMAIL_ID">EMAIL_ID</label>
                        <input type="text" class="form-control" id="EMAIL_ID" placeholder="Enter Email Id">
                        <div class="text-danger validation-error" id="emailidError" style="display: none;">Please Enter Valid Email Id!</div>
                    </div>

                    <div class="col-sm-2 col-md-4">
                        <label for="ALTERNATE_EMAIL_ID">Alternate Email</label>
                        <input type="text" class="form-control" id="ALTERNATE_EMAIL_ID" placeholder="Enter Alternate Email Id">
                    </div>
                </div>
                <br />
                <div class="row form-sm">
                    <div class="col-sm-2 col-md-4">
                        <label for="MOBILE_NUMBER">Mobile Number</label>
                        <input type="text" class="form-control" id="MOBILE_NUMBER" placeholder="Enter Mobile No." required>
                        <div class="text-danger validation-error" id="mobileNumberError" style="display: none;">Please Enter Valid 10 digit Mobile No!</div>
                    </div>
                    <div class="col-sm-2 col-md-4">
                        <label for="ALTERNATE_NUMBER">Alternate Number</label>
                        <input type="text" class="form-control" id="ALTERNATE_NUMBER" placeholder="Enter Alternate No.">
                        <div class="text-danger validation-error" id="altmobileNumberError" style="display: none;">Please Enter alternet Mobile No!</div>
                    </div>
                </div>

                <br />
                <div class="row form-sm">
                    <div class="col-sm-2 col-md-4">
                        <label for="MARITAL_STATUS">Marital Status</label>
                        <select class="form-control" id="MARITAL_STATUS" required>
                            <option value="select" selected>SELECT MARITAL STATUS</option>
                            <option value="SINGLE">SINGLE</option>
                            <option value="MARERRIED">MARRIED</option>
                            <option value="DIVORCED">DIVORCED</option>
                            <option value="WIDOWED">WIDOWED</option>
                            <option value="OTHER">OTHER</option>
                        </select>
                        <div class="text-danger validation-error" id="maritalstatusError" style="display: none;">Please Select Marital Status!</div>
                    </div>
                    <div class="col-sm-2 col-md-4">
                        <label for="P_ADDRESS">Permanent Address</label>
                        <input type="text" class="form-control" id="P_ADDRESS" placeholder="Enter Permanent Address" required>
                        <div class="text-danger validation-error" id="paddressError" style="display: none;">Please Enter PAddress!</div>
                    </div>
                    <div class="col-sm-2 col-md-4">
                        <label for="C_ADDRESS">Current Address</label>
                        <input type="text" class="form-control" id="C_ADDRESS" placeholder="Enter Current Address" required>
                        <div class="text-danger validation-error" id="caddressError" style="display: none;">Please Enter CAddress!</div>
                        <div class="row form-sm">
                            <div class="col-sm-12">
                                <div class="form-check">
                                    <input type="checkbox" class="form-check-input" id="sameAsPermanent">
                                    <label class="form-check-label" for="sameAsPermanent" style="color: darkturquoise;">Same as Permanent Address</label>

                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <br />

                <div class="row form-sm">
                    <div class="col-sm-2 col-md-4">
                        <label for="HOUSE_NO">House No</label>
                        <input type="text" class="form-control" id="HOUSE_NO" placeholder="Enter House No.">
                        <div class="text-danger validation-error" id="housenoError" style="display: none;">Please Enter Valid House No!</div>
                    </div>
                    <div class="col-sm-2 col-md-4">
                        <label for="STREET">Street</label>
                        <input type="text" class="form-control" id="STREET" placeholder="Enter Street">
                    </div>
                    <div class="col-sm-2 col-md-4">
                        <label for="AREA">Area</label>
                        <input type="text" class="form-control" id="AREA" name="AREA" placeholder="Enter Area">
                    </div>
                </div>
                <br />

                <div class="row form-sm">
                    <div class="col-sm-2 col-md-4">
                        <label for="STATE">State</label>

                        <select id="StateName-Create" class="form-control" onchange="bindddl('Create')" style="width:100%" asp-items="@(new SelectList(Model.StateLOV,"Value","Text")) " required>
                            <option>Select State</option>"
                        </select>
                    </div>
                    <div class="col-sm-2 col-md-4">
                        <label for="DISTRICT">District</label>
                        <select id="DistrictName-Create" class="form-control" style="width:100%" required>
                            <option>Select District</option>"
                        </select>
                    </div>
                    <div class="col-sm-2 col-md-4">
                        <label for="CITY">City</label>
                        <input type="text" class="form-control" id="CITY" placeholder="Enter City Name">
                        <div class="text-danger validation-error" id="cityError" style="display: none;">Please Enter City!</div>
                    </div>
                </div>
                <br />
                <div class="row form-sm">
                    <div class="col-sm-2 col-md-4">
                        <label for="HOMETOWN">Hometown</label>
                        <input type="text" class="form-control" id="HOMETOWN">
                    </div>
                    <div class="col-sm-2 col-md-4">
                        <label for="PINCODE">Pincode</label>
                        <input type="text" class="form-control" id="PINCODE" placeholder="Enter Pin Code" required>
                        <div class="text-danger validation-error" id="pincodeError" style="display: none;">Please Enter Pincode!</div>
                    </div>
                    <div class="col-sm-2 col-md-4">
                        <label for="COUNTRY">Country</label>
                        <input type="text" class="form-control" id="COUNTRY" placeholder="Enter Your Country Name" required>
                        <div class="text-danger validation-error" id="countryError" style="display: none;">Please Enter Country!</div>
                    </div>
                </div>

            </div>
            <div id="tab2" class="tab">
                <!-- Content for Tab 1 -->
                <div class="m-form">
                    <h3 class="sub-heading1 sub-heading2"><span>EDUCATION DETAILS</span></h3>
                    <div class="m-form-bx">
                        <!-- Education Details Header -->
                        <table class="table">
                            <thead>
                                <tr class="header-row">
                                    <th>Sno</th>
                                    <th>Course/Degree</th>
                                    <th>Subjects</th>
                                    <th>Name Of Board / University</th>
                                    <th>Year Of Passing(YYYY)</th>
                                    <th>Marks Obtained</th>
                                    <th>Total Marks</th>
                                    <th>Percentage</th>
                                    <th><a href="Javascript:void(0);" class="m-btn-1 addnew" onclick="AddNewRowFunc(this);"><i class="material-icons"></i><span style="color: white"> New Row</span></a></th>


                                </tr>
                            </thead>
                            <tbody>
                                @{
                                    var index = 0;
                                }
                                @if (Model.listAtrmsQualificationDtl != null)
                                {

                                    @foreach (var qualification in Model.listAtrmsQualificationDtl)
                                    {
                                        <tr class="form-row">
                                            <td><input type="number" class="form-control" id="Sno" asp-for="@Model.listAtrmsQualificationDtl[index].Sno " readonly></td>
                                            <td><input type="text" class="form-control" id="Qualification" asp-for="@Model.listAtrmsQualificationDtl[index].Qualification" readonly></td>
                                            <td>
                                                <input type="text" class="form-control" id="Subject" asp-for="@Model.listAtrmsQualificationDtl[index].Subject" oninput="validateName(this)" onkeydown="moveToNextField(event, 'NameOfBoard')" onblur="validateOnBlur(this)">
                                                <div id="Subject_error" class="error-message"></div>
                                            </td>

                                            <td>
                                                <input type="text" class="form-control" id="NameOfBoard" asp-for="@Model.listAtrmsQualificationDtl[index].NameOfBoard" oninput="validateName(this)" onkeydown="moveToNextField(event, 'YearOfPassing')" onblur="validateOnBlur(this)">
                                                <div id="NameOfBoard_error" class="error-message"></div>
                                            </td>

                                            <td>
                                                <input type="number" class="form-control" id="YearOfPassing" asp-for="@Model.listAtrmsQualificationDtl[index].YearOfPassing" oninput="validateName(this)" onkeydown="moveToNextField(event, 'MarksObtained')" onblur="validateOnBlur(this)">
                                                <div id="YearOfPassing_error" class="error-message"></div>
                                            </td>

                                            <td>
                                                <input type="number" class="form-control" id="MarksObtained" asp-for="@Model.listAtrmsQualificationDtl[index].MarksObtained" oninput="validateName(this)" onkeydown="moveToNextField(event, 'TotalMarks')" onblur="validateOnBlur(this)">
                                                <div id="MarksObtained_error" class="error-message"></div>
                                            </td>

                                            <td>
                                                <input type="number" class="form-control" id="TotalMarks" asp-for="@Model.listAtrmsQualificationDtl[index].TotalMarks" oninput="validateName(this)" onkeydown="moveToNextField(event, 'Percentage')" onblur="validateOnBlur(this)">
                                                <div id="TotalMarks_error" class="error-message"></div>
                                            </td>

                                            <td>
                                                <input type="number" class="form-control" id="Percentage" asp-for="@Model.listAtrmsQualificationDtl[index].Percentage" oninput="validateName(this)" readonly>
                                                <div id="Percentage_error" class="error-message"></div>
                                            </td>

                                            <td>
                                                <!-- Remove button without the disabled attribute -->
                                                <input type="button" value="Remove" onclick="RowRemove(this)" class="btn btn-danger m-btn" style="float:left;margin-right: 4px" />
                                            </td>
                                        </tr>

                                        index++;

                                    }
                                }

                            </tbody>
                        </table>
                    </div>

                </div>
                <div class="m-form-bx">
                    <h3 class="sub-heading1 sub-heading2"><span>EXPERIENCE DETAILS</span></h3>
                    <table class="table" id="experienceTable">
                        <thead>
                            <tr class="header-row">
                                <th>Sno</th>
                                <th>NAME OF ORGANIZATION</th>
                                <th>JOB POSITION</th>
                                <th>JOB DESCRIPTION</th>
                                <th>PERIOD FROM</th>
                                <th>PERIOD TO</th>
                                <th>LAST SALARY DRAWN</th>
                                <th><button type="button" class="btn btn-success" onclick="addRow()">Add Row</button></th>
                            </tr>
                        </thead>
                        <tbody id="experienceRows">
                            <!-- Initial hidden row -->
                            <tr class="form-row hidden-row">
                                <td>
                                    <input type="text" class="form-control sno_" id="sno_1" value="1" readonly>

                                </td>
                                <td>
                                    <input type="text" class="form-control" id="organization_1">


                                </td>
                                <td>
                                    <input type="text" class="form-control" id="position_1">



                                </td>
                                <td><input type="text" class="form-control" id="description_1"></td>
                                <td><input type="date" class="form-control" id="period_from_1" onchange="calculateTotalExperience()"></td>
                                <td><input type="date" class="form-control" id="period_to_1" onchange="calculateTotalExperience()"></td>
                                <td><input type="text" class="form-control" id="salary_drawn_1"></td>
                                <td><button type="button" class="btn btn-danger" onclick="removeRow_(this)">Remove</button></td>
                            </tr>
                        </tbody>
                    </table>
                    <div>Total Experience: <span id="totalExperience">0 years</span></div>
                </div>


            </div>



            <div class="tab" id="tab3">
                <!-- Tab 2 content -->
                <div class="m-form">
                    <h3 class="sub-heading1 sub-heading2"><span>ATTACHEMENT DETAILS</span></h3>
                    <div class="m-form-bx">
                        <div class="row form-sm">
                            <div class="col-sm-2 col-md-5">
                                <div class="m-form-bx">
                                    <div>
                                        <div class="alert alert-warning alert-dismissible show" role="alert">
                                            <strong>File Upload Guidelines!</strong>
                                            <ul>
                                                <li>Only .pdf, .png, .jpeg files will be accepted.</li>
                                                <li>Files must not exceed 2 MB.</li>
                                                <li>Files cannot be password protected.</li>
                                                <li>If you have large files, <a href="https://www.compress2go.com/" target="_blank" class="alert-link">Click here</a> to compress them. </li>
                                            </ul>
                                        </div>
                                    </div>

                                    <!-- Add the file input for uploading PDF -->
                                    <div class="row">
                                        <div class="form-group">
                                            <label for="imageFile">Choose Image</label>
                                            @*<input type="file"accept=".jpg, .png" style="border:none" id="Attachments" name="Attachments11" />*@
                                            <input type="File" accept=".jpg, .png" class="form-control" id="imageFile" required>
                                            <div class="text-danger validation-error" id="imageError" style="display: none;">Please select ImageFile!</div>
                                            <small class="text-muted">Max size: 3MB</small>
                                        </div>
                                        <div class="form-group">
                                            <label for="pdfFile">Choose Document Pdf</label>
                                            <input type="file" accept=".pdf" class="form-control" id="pdfFile">
                                            <div class="text-danger validation-error" id="pdfError" style="display: none;">Please Select Pdf File!</div>
                                            <small class="text-muted">Max size: 3MB</small>
                                        </div>

                                    </div>

                                    <!-- Display the uploaded image -->
                                    @*<div class="row">
                                        <div class="col-sm-6">
                                        <div class="m-form-bx">
                                        <h4>YOUR IMAGE</h4>
                                        <img src="" alt="Uploaded Image" id="uploadedImage" style="max-width: 50%;">
                                        </div>
                                        </div>
                                        </div>*@

                                </div>
                            </div>
                            <div class="col-sm-2 col-md-7">
                                <div class="pd-form-area">
                                    <table class="table table-striped table-hover" id="HrmsHrdGrid">
                                        <thead>
                                            <tr>
                                                <th>
                                                    Description
                                                </th>
                                                <th>
                                                    Size
                                                </th>
                                                <th>
                                                    Type
                                                </th>
                                                <th>
                                                    Status
                                                </th>
                                                @*<th>
                                                    Action
                                                    </th>*@
                                            </tr>
                                        </thead>
                                        <tbody></tbody>

                                    </table>

                                </div>
                            </div>

                        </div>
                    </div>


                </div>
            </div>
            <div id="tab4" class="tab">
                <!-- Content for Tab 4 -->
                <div class="m-form-bx">
                    <h3 class="sub-heading1 sub-heading2"><span>DECLARATION</span></h3>
                    <br />
                    <div class="frmm-bx">
                        <div class="row">

                            <div class="card">
                                <input type="hidden" id="hdnfile" />
                                <input type="hidden" id="hdnExp" />
                                <input type="hidden" id="HiddenField2" />
                                <p>
                                    <input type="checkbox" id="checkcr" />
                                    It is certified that the above information is true and correct and I have not done or doing apprenticeship from any other establishment. If <strong>any</strong> of the above information is found to be false at any time, I will be disqualified for employment in IFFCO.
                                </p>
                            </div>
                        </div>
                        <br />
                        <div class="row">
                            <div class="col-sm-1">
                                <label class="input-label">Date</label>
                            </div>
                            <div class="col-sm-2">
                                <input type="date" id="txtSubmitDate" placeholder="DD-MM-YYYY" class="form-control" />
                                <div class="text-danger validation-error" id="submitdateError" style="display: none;">Please Enter Submition date!</div>

                            </div>
                            <div class="col-sm-1 col-sm-offset-3">
                                <label class="input-label">Place</label>
                            </div>
                            <div class="col-sm-2">
                                <input type="text" id="txtPlace" class="form-control" />
                                <span class="text-danger" id="placeError" style="display: none;">Please Enter Valid Place!</span>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-12">
                                <p class="text-danger">Please check the Application for any errors before Clicking on Submit</p>
                            </div>
                        </div>

                        <div class="btn-area-fixed" align="center">
                            <div class="btn-area-fixed" align="center">
                                <div>
                                    <input type="button" id="createid" value="save" class="m-btn-1 save" style="float:none;margin-right: 4px" />
                                    <button class="m-btn-1 close1" type="button" onclick="GetIndex('M1/RECFSC02/Index')">Close</button>
                                </div>
                            </div>
                        </div>
                        <div>
                        </div>
                    </div>

                </div>


                <div class="navigation-buttons">
                    <button class="btn btn-primary btn-lg" onclick="previousTab()" style="float:none;margin-right: 10px">Previous</button>
                    <button class="btn btn-primary btn-lg" onclick="nextTab()">Next</button>
                </div>

        </form>

    </div>


    <script>

        var uploadedFiles = { image: null, pdf: null };

        $(document).on("change", "#imageFile, #pdfFile", function () {
            var inputId = this.id; // Get the ID of the input that triggered the change event
            var fileType = inputId === "imageFile" ? "image" : "pdf";
            var files = document.querySelector("#" + inputId).files;

            if (files.length > 0) {
                var fileSize = files[0].size;

                // Check file size
                if (fileSize > 3 * 1024 * 1024) {
                    alert('File size must be less than 3MB.');
                    // Clear the input to prevent further processing
                    $("#" + inputId).val('');
                    return;
                }

                var promise = getBase64(files[0]);
                promise.then(function (result) {
                    var comma = result.indexOf(',');
                    var base64 = result.substr(comma + 1);
                    var strBase64 = base64;
                    var fileName = files[0].name;

                    if (uploadedFiles[fileType]) {
                        // Replace the existing file for the current fileType
                        var existingRow = $("#HrmsHrdGrid tbody td:contains('" + fileType + "')").closest('tr');
                        existingRow.find('td:first').text(fileName);
                        existingRow.find('td:eq(1)').text(fileSize);
                        existingRow.find('td:eq(2) input#attachType').val(fileType); // Set the type in the "type" column
                        existingRow.find('input#attachFile').val(strBase64);
                        existingRow.find('i').text('Ready for Upload');

                        uploadedFiles[fileType] = {
                            name: fileName,
                            size: fileSize,
                            base64: strBase64
                        };
                    } else {
                        var trHTML = '<tr>';
                        trHTML += '<td>' + fileName + '</td>';
                        trHTML += '<td>' + fileSize + '</td>';
                        trHTML += '<td><input type="text" readonly id="attachType' + 1 + '" value="' + fileType + '" /></td>'; // Set the type in the "type" column
                        trHTML += '<td><input type="hidden" id="attachFile" value="' + strBase64 + '" /><i>Ready for Upload</i></td>';
                        trHTML += '</tr>';
                        $('#HrmsHrdGrid tbody').append(trHTML);

                        uploadedFiles[fileType] = {
                            name: fileName,
                            size: fileSize,
                            base64: strBase64
                        };
                    }
                });
            }
        });

        document.getElementById("sameAsPermanent").addEventListener("change", function () {
            if (this.checked) {
                // If checkbox is checked, copy values from permanent address to correspondence address
                document.getElementById("C_ADDRESS").value = document.getElementById("P_ADDRESS").value;
                // Add additional fields if needed
            } else {
                // Clear correspondence address fields
                document.getElementById("C_ADDRESS").value = "";
                // Clear additional fields if needed
            }
        });


        $(document).ready(function () {
            // Function to toggle the style based on the checkbox state
            function toggleAddressStyle() {
                var isSameAsPermanent = $("#sameAsPermanent").is(":checked");

                if (isSameAsPermanent) {
                    // Apply your desired styling when checked
                    $("#C_ADDRESS").addClass("same-as-permanent");
                } else {
                    // Remove the styling when unchecked
                    $("#C_ADDRESS").removeClass("same-as-permanent");
                }
            }

            // Initial call to set the style based on the checkbox state
            toggleAddressStyle();

            // Bind the function to the checkbox change event
            $("#sameAsPermanent").change(function () {
                toggleAddressStyle();
            });
        });




        // Attach event listeners for name inputs
        document.getElementById("txtName").addEventListener("input", function () {
            validateNameInput("txtName", "nameError");
        });

        document.getElementById("MIDDLE_NAME").addEventListener("input", function () {
            validateNameInput("MIDDLE_NAME", "middlenameError");
        });

        document.getElementById("txtLASTNAME").addEventListener("input", function () {
            validateNameInput("txtLASTNAME", "lastnameError");
        });
        document.getElementById("txtPlace").addEventListener("input", function () {
            validateNameInput("txtPlace", "placeError");
        });

        function validateNameInput(inputId, errorId) {
            var input = document.getElementById(inputId);
            var error = document.getElementById(errorId);

            // Remove non-alphabetic characters from the input value
            var cleanedValue = input.value.replace(/[^a-zA-Z]/g, '').toUpperCase();

            // Update the input value with cleaned value
            input.value = cleanedValue;

            // Check if the cleaned value is not empty
            if (cleanedValue.trim() === '') {
                error.style.display = "none";
            } else {
                error.style.display = "none";
            }
        }


        // Attach event listeners for other inputs
        document.getElementById("FATHER_NAME").addEventListener("input", function () {
            validateOtherInput("FATHER_NAME", "fathernameError");
        });

        document.getElementById("FATHER_OCCUPATION").addEventListener("input", function () {
            validateOtherInput("FATHER_OCCUPATION", "fatheroccupationError");
        });

        document.getElementById("MOTHER_NAME").addEventListener("input", function () {
            validateOtherInput("MOTHER_NAME", "mothernameError");
        });

        document.getElementById("MOTHER_OCCUPATION").addEventListener("input", function () {
            validateOtherInput("MOTHER_OCCUPATION", "motheroccupationError");
        });

        document.getElementById("CATEGORY").addEventListener("input", function () {
            validateOtherInput("CATEGORY", "categoryError");
        });

        document.getElementById("BIRTH_PLACE").addEventListener("input", function () {
            validateOtherInput("BIRTH_PLACE", "birthplaceError");
        });


        document.getElementById("NATIONALITY").addEventListener("input", function () {
            validateOtherInput("NATIONALITY", "nationalityError");
        });
        document.getElementById("IDENTIFICATION_MARK").addEventListener("input", function () {
            validateOtherInput("IDENTIFICATION_MARK", "identificationmarkError");
        });


        document.getElementById("STREET").addEventListener("input", function () {
            validateOtherInput("STREET", "streetError");
        });
        document.getElementById("AREA").addEventListener("input", function () {
            validateOtherInput("AREA", "areaError");
        });

        document.getElementById("CITY").addEventListener("input", function () {
            validateOtherInput("CITY", "cityError");
        });

        document.getElementById("HOMETOWN").addEventListener("input", function () {
            validateOtherInput("HOMETOWN", "hometownError");
        });

        document.getElementById("COUNTRY").addEventListener("input", function () {
            validateOtherInput("COUNTRY", "countryError");
        });
        // Validation for names (allowing spaces)
        function validateOtherInput(inputId, errorId) {
            var input = document.getElementById(inputId);
            var error = document.getElementById(errorId);

            // Preserve leading and trailing spaces
            var cleanedValue = input.value.replace(/[^A-Za-z ]/g, '').toUpperCase();

            // Update the input value with cleaned value
            input.value = cleanedValue;

            // Check if the cleaned value is not empty
            if (cleanedValue.trim() === '') {
                error.style.display = "none";
            } else {
                error.style.display = "none";
            }
        }



        document.getElementById("MOBILE_NUMBER").addEventListener("input", function () {
            validatemobInput("MOBILE_NUMBER", "mobileNumberError");
        });


        //document.getElementById("ALTERNATE_NUMBER").addEventListener("input", function () {
        //    validatemobInput("ALTERNATE_NUMBER", "altmobileNumberError");
        //});

        function validatemobInput(inputId, errorId) {
            var input = document.getElementById(inputId);
            var error = document.getElementById(errorId);

            // Remove non-numeric characters from the input value
            var cleanedValue = input.value.replace(/\D/g, '');

            // Limit the cleaned value to the first 10 characters
            cleanedValue = cleanedValue.slice(0, 10);

            // Update the input value with cleaned value
            input.value = cleanedValue;

            // Update the display of the error element based on the cleaned value
            if (cleanedValue.length === 10) {
                error.style.display = "none";
            } else {
                error.style.display = "block";  // Adjust to your preferred display style
            }
        }

        document.getElementById("AADHAR_NO").addEventListener("input", function () {
            validateAadharInput("AADHAR_NO", "aadharnoError");
        });


        function validateAadharInput(inputId, errorId) {
            var input = document.getElementById(inputId);
            var error = document.getElementById(errorId);

            // Remove non-numeric characters from the input value
            var cleanedValue = input.value.replace(/\D/g, '');

            // Limit the cleaned value to the first 12 characters
            cleanedValue = cleanedValue.slice(0, 12);

            // Format the Aadhar number as "0000-0000-0000-0000"
            var formattedValue = cleanedValue.replace(/(\d{4})(\d{4})(\d{4})(\d{4})/, '$1-$2-$3-$4');

            // Update the input value with the formatted value
            input.value = formattedValue;

            // Update the display of the error element based on the cleaned value
            if (cleanedValue.length === 12) {
                error.style.display = "none";
            } else {
                error.style.display = "block";  // Adjust to your preferred display style
            }
        }

        document.getElementById("PINCODE").addEventListener("input", function () {
            validatepincodeInput("PINCODE", "pincodeError");
        });

        function validatepincodeInput(inputId, errorId) {
            var input = document.getElementById(inputId);
            var error = document.getElementById(errorId);

            // Remove non-numeric characters from the input value
            var cleanedValue = input.value.replace(/\D/g, '');

            // Limit the cleaned value to the first 10 characters
            cleanedValue = cleanedValue.slice(0, 6);

            // Update the input value with cleaned value
            input.value = cleanedValue;

            // Update the display of the error element based on the cleaned value
            if (cleanedValue.length === 6) {
                error.style.display = "none";
            } else {
                error.style.display = "block";  // Adjust to your preferred display style
            }
        }


        document.getElementById("C_ADDRESS").addEventListener("input", function () {
            validatelocationInput("C_ADDRESS", "caddressError");
        });

        document.getElementById("P_ADDRESS").addEventListener("input", function () {
            validatelocationInput("P_ADDRESS", "paddressError");
        });

        document.getElementById("STREET").addEventListener("input", function () {
            validatelocationInput("STREET", "streetError");
        });

        document.getElementById("AREA").addEventListener("input", function () {
            validatelocationInput("AREA", "areaError");
        });

        document.getElementById("HOUSE_NO").addEventListener("keyup", function () {
            validatelocationInput("HOUSE_NO", "housenoError");
        });

        document.getElementById("DATE_OF_BIRTH").addEventListener("keyup", function () {
            validatelocationInput("DATE_OF_BIRTH", "dateofbirthError");
        });


        function validatelocationInput(inputId, errorId) {
            var input = document.getElementById(inputId);
            var error = document.getElementById(errorId);

            // Preserve leading and trailing spaces, allowing letters and numbers
            var cleanedValue = input.value.replace(/[^A-Za-z0-9 ]/g, '').toUpperCase();

            // Update the input value with the cleaned value
            input.value = cleanedValue;

            // Check if the cleaned value is not empty
            if (cleanedValue.trim() === '') {
                error.style.display = "none";
            } else {
                error.style.display = "none";
            }
        }

        document.getElementById("EMAIL_ID").addEventListener("keyup", function () {
            validateemailInput("EMAIL_ID", "emailidError");
        });

        function validateemailInput(inputId, errorId) {
            var input = document.getElementById(inputId);
            var error = document.getElementById(errorId);

            // Get the input value
            var inputValue = input.value;

            // Update the input value with the trimmed value
            input.value = inputValue.trim();

            // Check if the trimmed value is empty
            if (inputValue === '') {
                error.style.display = "block"; // show error
            } else {
                error.style.display = "none"; // hide error
            }
        }


        document.getElementById("organization_1").addEventListener("keyup", function () {
            validateorgInput("organization_1", "orgError");
        });
        document.getElementById("position_1").addEventListener("keyup", function () {
            validateorgInput("position_1", "positionError");
        });
        document.getElementById("description_1").addEventListener("keyup", function () {
            validateorgInput("description_1", "descriptionError");
        });


        function validateorgInput
            (inputId, errorId) {
            var input = document.getElementById(inputId);
            var error = document.getElementById(errorId);

            // Preserve leading and trailing spaces
            var cleanedValue = input.value.replace(/[^A-Za-z ]/g, '').toUpperCase();

            // Update the input value with cleaned value
            input.value = cleanedValue;

            // Check if the cleaned value is not empty
            if (cleanedValue.trim() === '') {
                error.style.display = "none";
            } else {
                error.style.display = "none";
            }
        }

        document.getElementById("salary_drawn_1").addEventListener("keyup", function () {
            validatesalInput("salary_drawn_1", "salaryError");
        });
        function validatesalInput(inputId, errorId) {
            var input = document.getElementById(inputId);
            var error = document.getElementById(errorId);

            // Preserve leading and trailing spaces, allow only numbers
            var cleanedValue = input.value.replace(/[^0-9 ]/g, '');

            // Update the input value with cleaned value
            input.value = cleanedValue;

            // Check if the cleaned value is not empty
            if (cleanedValue.trim() === '') {
                error.style.display = "none";
            } else {
                error.style.display = "none";
            }
        }
        document.getElementById("imageFile").addEventListener("keyup", function () {
            validatesalInput("imageFile", "imageError");
        });
        function validateImageInput(inputId, errorId) {
            var input = document.getElementById(inputId);
            var error = document.getElementById(errorId);

            var selectedFile = input.files[0];

            if (selectedFile && isImageFile(selectedFile)) {
                error.style.display = "none";
            } else {
                error.style.display = "block";
                error.innerHTML = "Invalid image file. Please choose a valid image.";
                input.value = ""; // Clear the file input value
            }
        }
        document.getElementById("txtSubmitDate").addEventListener("input", function () {
            validatesalInput("txtSubmitDate", "submitdateError");
        });

        function validatesalInput(inputId, errorId) {
            var input = document.getElementById(inputId);
            var error = document.getElementById(errorId);

            // Check if the input value is not empty
            if (input.value.trim() === '') {
                // Show the error message if the input value is empty
                error.style.display = "block";
            } else {
                // Hide the error message if the input value is not empty
                error.style.display = "none";
            }
        }







        //$(document).ready(function () {
        //    $('#HrmsHrdGrid').DataTable();
        //    $('#StateCd').select2();
        //    $('#UniversityId').select2();
        //    $('#StateName-Create').select2();
        //    $('StateName-Edit').select2();
        //    $('#ParentMenuId').select2();
        //});



        //function bindddl(val) {
        //    debugger;
        //    var StateCd = $("#StateName-" + val).val();
        //    $.ajax({
        //        url: '/USERF01/ddl1',
        //        type: 'get',
        //        contentType: "application/json;charset=utf-8",
        //        datatype: "json",
        //        data: { StateCd: StateCd },
        //        async: false,
        //        success: function (DistrictLOV) {
        //            BindDropDown(DistrictLOV, "#DistrictName-" + val)
        //            console.log(DistrictLOV);
        //        },
        //        error: function () {
        //            alert('District not found !!');
        //        }
        //    });
        //}



        //function BindDropDown(data, id) {
        //    debugger;
        //    var ddlhtml = "<option>----------Select District----------</option>";
        //    $.each(data, function (index, ddl) {
        //        ddlhtml += "<option value=" + ddl.value + ">" + ddl.text + "</option>";
        //    });
        //    $(id).html(ddlhtml);
        //    $(id).select2();
        //}






        //// Get the select element
        //var iffcoEmployeeSelect = document.getElementById("IffcoEmployee");

        //// Get the table element
        //var relativeTable = document.getElementById("relativeTable");

        //// Add an event listener to the select element
        //iffcoEmployeeSelect.addEventListener("change", function () {
        //    // Check if "Yes" is selected
        //    if (iffcoEmployeeSelect.value === "yes") {
        //        // Show the table
        //        relativeTable.style.display = "table";
        //    } else {
        //        // Hide the table
        //        relativeTable.style.display = "none";
        //    }
        //});

        function AddNewRowFunc(row) {
            debugger;
            //$('#RefDate').val(Dateformate($('#RefDate').val())).removeClass("datetime");
            //$('#DIDate').val(Dateformate($('#DIDate').val()));
            CommonSubmit($(row).parents('form').serialize(), $(row).parents('form').attr('action', '/USERF01/AddNewRow').attr('action'), event);
        }

        function RowRemove(row) {
            $(row).parent().parent().remove();
        }

        function AddNewRow() {
            var markup = '<tr>';
            markup += '<td>#</td>';
            markup += '<td><input type="number" id="Sno" class="form-control" ></td>';
            markup += '<td><select id="Qualification" class="form-control"></select></td>';
            markup += '<td><input type="text" id="Subject" class="form-control"></td>';
            markup += '<td><input type="text" id="NameOfBoard" class="form-control" ></td>';
            markup += '<td><input type="number" id="YearOfPassing" class="form-control" ></td>';
            markup += '<td><input type="number" id="MarksObtained" class="form-control"></td>';
            markup += '<td><input type="number" id="TotalMarks"class="form-control"></td>';
            markup += '<td><input type="number" id="Percentage" class="form-control"  readonly></td>';
            markup += '<td><input type="button" value="remove" onclick="RowRemove(this)"></td>';
            markup += '</tr>';

            $('#tbodypop').append(markup);
        }
        function AddNewRowFunc_ex(row) {
            debugger;
            //$('#RefDate').val(Dateformate($('#RefDate').val())).removeClass("datetime");
            //$('#DIDate').val(Dateformate($('#DIDate').val()));
            CommonSubmit($(row).parents('form').serialize(), $(row).parents('form').attr('action', '/USERF01/AddNewRow').attr('action'), event);
        }

        function RowRemove_ex(row) {
            $(row).parent().parent().remove();
        }

        function AddNewRow_ex() {
            var markup = '<tr>';
            markup += '<td>#</td>';
            markup += '<td><input type="number" id="Sno" class="form-control" ></td>';
            markup += '<td><input type="text" id="NameOfOrganization" class="form-control"></td>';
            markup += '<td><input type="text" id="JobPosition" class="form-control"></td>';
            markup += '<td><input type="text" id="JobDescription" class="form-control" ></td>';
            markup += '<td><input type="date" id="PeriodFrom" class="form-control" ></td>';
            markup += '<td><input type="date" id="PeriodTo" class="form-control"></td>';
            markup += '<td><input type="number" id="LastSalaryDrawn"class="form-control"></td>';
            markup += '<td><input type="button" value="remove" onclick="RowRemove(this)"></td>';
            markup += '</tr>';

            $('#tbodypop').append(markup);
        }




        //document.getElementById("btnSubmit").addEventListener("click", function () {
        //    // JavaScript code to handle form submission
        //    var submitDate = document.getElementById("txtSubmitDate").value;
        //    var place = document.getElementById("txtPlace").value;

        //    // Validation logic (you can customize this)
        //    if (!submitDate || !place) {
        //        document.getElementById("placeError").style.display = "block";
        //        return;
        //    } else {
        //        document.getElementById("placeError").style.display = "none";
        //    }

        //    // Handle form submission (e.g., AJAX request or form submit)
        //    // You can add your submission logic here
        //});
        document.getElementById("btnSubmit").addEventListener("click", function () {
            debugger;
            var submitDate = document.getElementById("txtSubmitDate").value;
            var place = document.getElementById("txtPlace").value;
            var name = document.getElementById("txtName").value;
            var lastName = document.getElementById("txtLASTNAME").value;
            var fatherName = document.getElementById("FATHER_NAME").value;
            var fatherOccupation = document.getElementById("FATHER_OCCUPATION").value;
            var motherName = document.getElementById("MOTHER_NAME").value;
            var dateOfBirth = document.getElementById("DATE_OF_BIRTH").value;
            var birthPlace = document.getElementById("BIRTH_PLACE").value;
            var gender = document.getElementById("GENDER").value;
            var category = document.getElementById("CATEGORY").value;
            var nationality = document.getElementById("NATIONALITY").value;

            var aadharNo = document.getElementById("AADHAR_NO").value;
            var emailId = document.getElementById("EMAIL_ID").value;
            var mobileNumber = document.getElementById("MOBILE_NUMBER").value;
            //var altmobileNumber = document.getElementById("ALTERNATE_NUMBER").value;
            var maritalStatus = document.getElementById("MARITAL_STATUS").value;
            var cAddress = document.getElementById("C_ADDRESS").value;
            var pAddress = document.getElementById("P_ADDRESS").value;

            var houseNo = document.getElementById("HOUSE_NO").value;
            var city = document.getElementById("CITY").value;
            var pincode = document.getElementById("PINCODE").value;
            var country = document.getElementById("COUNTRY").value;
            var image = document.getElementById("imageFile").value;
            var pdf = document.getElementById("pdfFile").value;





            // Validation logic (you can customize this)
            if (!submitDate || !place || !name || !lastName || !fatherName || !fatherOccupation || !motherName || !dateOfBirth || !birthPlace || !gender || !category || !nationality || !aadharNo || !emailId || !mobileNumber || !maritalStatus || !cAddress || !pAddress || !houseNo || !city || !pincode || !country || !image || !pdf) {
                document.getElementById("submitdateError").style.display = submitDate ? "none" : "block";
                document.getElementById("placeError").style.display = place ? "none" : "block";
                document.getElementById("nameError").style.display = name ? "none" : "block";
                document.getElementById("lastnameError").style.display = lastName ? "none" : "block";
                document.getElementById("fathernameError").style.display = fatherName ? "none" : "block";
                document.getElementById("fatheroccupationError").style.display = fatherOccupation ? "none" : "block";
                document.getElementById("mothernameError").style.display = motherName ? "none" : "block";
                document.getElementById("dateofbirthError").style.display = dateOfBirth ? "none" : "block";
                document.getElementById("birthplaceError").style.display = birthPlace ? "none" : "block";
                document.getElementById("genderError").style.display = gender ? "none" : "block";
                document.getElementById("categoryError").style.display = category ? "none" : "block";
                document.getElementById("nationalityError").style.display = nationality ? "none" : "block";
                document.getElementById("aadharnoError").style.display = aadharNo ? "none" : "block";
                document.getElementById("emailidError").style.display = emailId ? "none" : "block";
                document.getElementById("mobileNumberError").style.display = mobileNumber ? "none" : "block";
                // document.getElementById("altmobileNumberError").style.display = altmobileNumber ? "none" : "block";
                document.getElementById("maritalstatusError").style.display = maritalStatus ? "none" : "block";
                document.getElementById("caddressError").style.display = cAddress ? "none" : "block";
                document.getElementById("paddressError").style.display = pAddress ? "none" : "block";
                document.getElementById("housenoError").style.display = houseNo ? "none" : "block";
                document.getElementById("cityError").style.display = city ? "none" : "block";
                document.getElementById("pincodeError").style.display = pincode ? "none" : "block";
                document.getElementById("countryError").style.display = country ? "none" : "block";
                document.getElementById("imageError").style.display = image ? "none" : "block";
                document.getElementById("pdfError").style.display = pdf ? "none" : "block";



                event.preventDefault();

                if (!submitDate) {
                    document.getElementById("txtSubmitDate").focus();
                } else if (!place) {
                    document.getElementById("txtPlace").focus();
                } else if (!name) {
                    document.getElementById("txtName").focus();
                } else if (!lastName) {
                    document.getElementById("txtLASTNAME").focus();
                } else {
                    document.getElementById("tab1-button").focus();
                }

                return;
            }

            // If all fields are filled, hide the error messages
            document.getElementById("submitdateError").style.display = "none";
            document.getElementById("placeError").style.display = "none";
            document.getElementById("nameError").style.display = "none";
            document.getElementById("lastnameError").style.display = "none";

            // Handle form submission (e.g., AJAX request or form submit)
            // You can add your submission logic here
        });



        let currentTab = 1;

        // JavaScript to toggle between tabs
        function openTab(tabName) {
            // Hide all tabs
            const tabs = document.getElementsByClassName("tab");
            for (let i = 0; i < tabs.length; i++) {
                tabs[i].style.display = "none";
            }

            // Remove the active-button class from all tab buttons
            const tabButtons = document.getElementsByClassName("tab-button");
            for (let i = 0; i < tabButtons.length; i++) {
                tabButtons[i].classList.remove("active-button");
            }

            // Show the selected tab
            document.getElementById(tabName).style.display = "block";

            // Add the active-button class to the clicked tab button
            const clickedButton = document.querySelector(`[onclick="openTab('${tabName}')"]`);
            clickedButton.classList.add("active-button");
        }

        // Function to move to the previous tab
        function previousTab() {
            if (currentTab > 1) {
                currentTab--;
                openTab(`tab${currentTab}`);
            }
        }

        // Function to move to the next tab
        function nextTab() {
            if (currentTab < 4) {
                currentTab++;
                openTab(`tab${currentTab}`);
                document.getElementById(`tab${currentTab - 1}-button`).classList.remove("active-button");
                document.getElementById(`tab${currentTab - 1}-button`).classList.add("completed-button");
            }
        }

        // Open the first tab by default
        openTab('tab1');
        // here statrt for education dtl

        let rowCounter = 2; // Initialize the row counter

        function updateSerialNumbers() {
            const serialNumberInputs = document.querySelectorAll(".sno");

            // Loop through all serial number inputs and update their values
            serialNumberInputs.forEach((input, index) => {
                input.value = index + 1;
            });
        }

        function AddNewRowFunc() {
            const educationRows = document.getElementById("educationRows");
            const newRow = document.createElement("tr");
            newRow.classList.add("form-row");

            // Increment the row counter and set Sno value
            rowCounter++;
            newRow.innerHTML = `
                                                                <td><input type="text" class="form-control sno" name="sno_${rowCounter}" value="${rowCounter}" readonly></td>
                                                                <td>
                                                                    <select class="form-control" name="course_${rowCounter}" required>
                                                                        <option value="select" selected>--Course--</option>
                                                                        <option value="ITI">ITI</option>
                                                                        <option value="DIPLOMA">DIPLOMA</option>
                                                                        <option value="BSC">BSc</option>
                                                                        <option value="Bcom">BCom</option>
                                                                        <option value="BCA">BCA</option>
                                                                        <option value="CA">CA</option>
                                                                    </select>
                                                                </td>
                                                                <td><input type="text" class="form-control" name="subjects_${rowCounter}" required></td>
                                                                <td><input type="text" class="form-control" name="university_${rowCounter}"></td>
                                                                <td><input type="text" class="form-control" name="year_${rowCounter}"></td>
                                                                <td><input type="text" class="form-control" name="marks_obtained_${rowCounter}"></td>
                                                                <td><input type="text" class="form-control" name="total_marks_${rowCounter}"></td>
                                                                <td><input type="text" class="form-control" name="percentage_${rowCounter}"></td>
                                                                <td><button type="button" class="btn btn-danger" onclick="removeRowEDU(this)">Remove</button></td>
                                                            `;

            educationRows.appendChild(newRow);

            // Update the serial numbers
            updateSerialNumbers();
        }

        function removeRowEDU(button) {
            const row = button.closest(".form-row");
            row.remove();

            // Update the serial numbers after removing a row
            updateSerialNumbers();
        }

        let rowCounter_ = 1;

        function calculateTotalExperience() {
            const rows = document.querySelectorAll(".hidden-row:not(.hidden-row)");
            let totalMonths = 0;

            rows.forEach((row) => {
                const periodFromInput = row.querySelector(`[name^="period_from_"]`).value.trim();
                const periodToInput = row.querySelector(`[name^="period_to_"]`).value.trim();

                if (isValidDate(periodFromInput) && isValidDate(periodToInput)) {
                    const periodFrom = new Date(periodFromInput);
                    const periodTo = new Date(periodToInput);

                    const diffMonths = calculateMonthDifference(periodFrom, periodTo);
                    totalMonths += diffMonths;
                }
            });

            const { years, months } = calculateYearsAndMonths(totalMonths);

            const totalExperienceElement = document.getElementById("totalExperience");
            totalExperienceElement.textContent = `${years} years ${months} months`;

            function isValidDate(dateString) {
                const date = new Date(dateString);
                return !isNaN(date) && date instanceof Date;
            }

            function calculateMonthDifference(startDate, endDate) {
                const diffTime = Math.abs(endDate - startDate);
                return Math.ceil(diffTime / (1000 * 60 * 60 * 24 * 30.44)); // Approximate months in a year
            }

            function calculateYearsAndMonths(totalMonths) {
                const years = Math.floor(totalMonths / 12);
                const months = totalMonths % 12;
                return { years, months };
            }
        }




        function updateSerialNumbers_() {
            const serialNumberElements = document.querySelectorAll(".sno_");
            serialNumberElements.forEach((element, index) => {
                element.value = index + 1;
            });

        }

        function addRow() {
            const experienceRows = document.getElementById("experienceRows");

            // Remove the initial hidden row if it exists
            const hiddenRow = experienceRows.querySelector(".hidden-row");
            if (hiddenRow) {
                hiddenRow.remove();
            }

            rowCounter_++;

            const newRow = document.createElement("tr");
            newRow.classList.add("form-row_");
            newRow.innerHTML = `
                                                                <td><input type="text" class="form-control sno_" name="sno_${rowCounter_}" value="${rowCounter_}" readonly></td>
                                                                <td><input type="text" class="form-control" name="organization_${rowCounter_}"></td>
                                                                <td><input type="text" class="form-control" name="position_${rowCounter_}"></td>
                                                                <td><input type="text" class="form-control" name="description_${rowCounter_}"></td>
                                                                <td><input type="date" class="form-control" name="period_from_${rowCounter_}" onchange="calculateTotalExperience()"></td>
                                                                <td><input type="date" class="form-control" name="period_to_${rowCounter_}" onchange="calculateTotalExperience()"></td>
                                                                <td><input type="text" class="form-control" name="salary_drawn_${rowCounter_}"></td>
                                                                <td><button type="button" class="btn btn-danger" onclick="removeRow_(this)">Remove</button></td>
                                                            `;
            experienceRows.appendChild(newRow);
            updateSerialNumbers_();
        }

        function removeRow_(button) {
            const row = button.closest(".form-row_");
            row.remove();
            //calculateTotalExperience();

            updateSerialNumbers_();
        }



        // JavaScript to display the uploaded image
        const imageFileInput = document.getElementById('imageFile');
        const uploadedImage = document.getElementById('uploadedImage');

        imageFileInput.addEventListener('change', function () {
            if (this.files && this.files[0]) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    uploadedImage.src = e.target.result;
                };
                reader.readAsDataURL(this.files[0]);
            }
        });




        $(document).ready(function () {



            $('#StateName-Create').select2();


        });



        function bindddl(val) {
            debugger;
            var StateCd = $("#StateName-" + val).val();
            $.ajax({
                url: '/USERF01/ddl1',
                type: 'get',
                contentType: "application/json;charset=utf-8",
                datatype: "json",
                data: { StateCd: StateCd },
                async: false,
                success: function (DistrictLOV) {
                    BindDropDown(DistrictLOV, "#DistrictName-" + val)
                    console.log(DistrictLOV);
                },
                error: function () {
                    alert('District not found !!');
                }
            });
        }



        function BindDropDown(data, id) {
            debugger;
            var ddlhtml = "<option>----------Select District----------</option>";
            $.each(data, function (index, ddl) {
                ddlhtml += "<option value=" + ddl.value + ">" + ddl.text + "</option>";
            });
            $(id).html(ddlhtml);
            $(id).select2();
        }

         $(document).ready(function ()
         {
             $("#PostAppliedDescription").on("change", function ()
             {
                 // Get the selected option
                 var selectedOption = $(this).find("option:selected");
                 console.log("Selected Option:", selectedOption.text());
                  debugger;
                 // Split the value of the selected option by comma
                 var optionValues = selectedOption.val().split(',');

                 // Update the hidden fields with the selected values
                 $("#PostAppliedCode").val(optionValues[0]);
                 $("#RecCode").val(optionValues[1]);

                 // Serialize the form and set the form action
                 var form = $(this).closest('form');
                 form.attr('action', 'M1/USERF01/AddNewRow');
                 var formData = form.serialize();

                 console.log("Form Data:", formData);

                 // Call the CommonSubmit function
                 console.log("Calling CommonSubmit function");
                 CommonSubmit(formData, form.attr('action'), event);
             });
         });



        // Function to get the base64 representation of a file
        function getBase64(file) {
            return new Promise(function (resolve, reject) {
                var reader = new FileReader();
                reader.readAsDataURL(file);
                reader.onload = function () {
                    resolve(reader.result);
                };
                reader.onerror = reject;
            });
        }
        // Get the select element
        var iffcoEmployeeSelect = document.getElementById("IffcoEmployee");

        // Get the table element
        var relativeTable = document.getElementById("relativeTable");

        // Add an event listener to the select element
        iffcoEmployeeSelect.addEventListener("change", function () {
            // Check if "Yes" is selected
            if (iffcoEmployeeSelect.value === "yes") {
                // Show the table
                relativeTable.style.display = "table";
            } else {
                // Hide the table
                relativeTable.style.display = "none";
            }
        });

        $('.save').on("click", function () {
            // Replace 'true' with your actual condition to check if the form is valid
            if (true) {
                $(".modalLoader").css("display", "block");

                var rECFSC02ViewModel = JSON.stringify({
                    'objAtrmsPersonalDtl': PersonalDtlArray(),
                    'listAtrmsQualificationDtl': QualificationListArray(),
                    'listAtrmsExperienceDtl': ExperienceListArray(),
                    'listAtrmsDocumentsDtlMain': AttachmentListArray()
                });

                $.ajax({
                    type: "POST",
                    url: "M1/USERF01/Create",
                    data: rECFSC02ViewModel,
                    contentType: "application/json; charset=utf-8",
                    dataType: "json"
                })
                    .done(function (response) {
                        console.log(response);

                        // Display success message
                        $(".modalLoader").hide();
                        $("#successMessage").text("Data saved successfully!").show();

                        // Delay for a few seconds and then hide the success message
                        setTimeout(function () {
                            $("#successMessage").hide();
                        }, 5000);

                        //// Redirect to the index page
                        //GetIndex('/USERF01/Index/');
                    })
                    .fail(function (xhr, status, error) {
                        console.error(xhr, status, error);

                        // Handle error
                        $(".modalLoader").hide();
                        var errorMessage = "An error occurred while saving data. Please try again.";

                        if (xhr.responseJSON && xhr.responseJSON.message) {
                            errorMessage = xhr.responseJSON.message;
                        }

                        // Display an error message or handle it accordingly
                        alert(errorMessage);
                    });
            } else {
                // If the form is not valid, you can display an error message or handle it accordingly
                alert("Please fill in all required fields before saving.");
            }
        });



        function PersonalDtlArray() {
            IDs = {}

            IDs.unitCode = $('#UnitCode').val();
            IDs.postAppliedDescription = $('#PostAppliedDescription').val();
            IDs.postAppliedCode = $('#PostAppliedCode').val();
            IDs.recCode = $('#RecCode').val();
            IDs.qualification = $('#Qualification').val();
            IDs.atId = $('#AT_ID').val();
            IDs.firstName = $('#FIRST_NAME').val();
            IDs.middleName = $('#MIDDLE_NAME').val();
            IDs.lastName = $('#LAST_NAME').val();
            IDs.fatherName = $('#FATHER_NAME').val();
            IDs.fatherOccupation = $('#FATHER_OCCUPATION').val();
            IDs.motherName = $('#MOTHER_NAME').val();
            IDs.motherOccupation = $('#MOTHER_OCCUPATION').val();
            IDs.dateOfBirth = $('#DATE_OF_BIRTH').val();
            IDs.birthPlace = $('#BIRTH_PLACE').val();
            IDs.gender = $('#GENDER').val();
            IDs.nationality = $('#NATIONALITY').val();
            IDs.category = $('#CATEGORY').val();
            IDs.identificationMarks = $('#IDENTIFICATION_MARK').val();
            IDs.emailId = $('#EMAIL_ID').val();
            IDs.alternetemailId = $('#ALTERNATE_EMAIL_ID').val();
            IDs.mobileNumber = $('#MOBILE_NUMBER').val();
            IDs.alternetNumber = $('#ALTERNATE_NUMBER').val();
            IDs.maritalStatus = $('#MARITAL_STATUS').val();
            IDs.cAddress = $('#C_ADDRESS').val();
            IDs.pAddress = $('#P_ADDRESS').val();
            IDs.houseNo = $('#HOUSE_NO').val();
            IDs.street = $('#STREET').val();
            IDs.area = $('#AREA').val();
            IDs.state = $('#StateName-Create').val();
            IDs.district = $('#DistrictName-Create').val();

            IDs.hometown = $('#HOMETOWN').val();
            IDs.pincode = $('#PINCODE').val();
            IDs.country = $('#COUNTRY ').val();
            IDs.exApperentice = $('#ExApperentice ').val();
            IDs.landLoser = $('#LandLoser ').val();
            IDs.regNoEmpExchange = $('#RegNoEmpExchange ').val();
            IDs.nameEmpExchange = $('#NameEmpExchange ').val();
            IDs.mhrdNats = $('#MhrdNats ').val();
            IDs.regNumberMhrdNats = $('#RegNumberMhrdNats ').val();
            IDs.iffcoEmployee = $('#IffcoEmployee ').val();
            IDs.submitdate = $('#SUBMIT_DATE ').val();
            IDs.submitdate = $('#RelativeEmpId ').val();
            IDs.relativename = $('#RelativeName').val();
            IDs.relativeunit = $('#RelativeUnit').val();
            IDs.relativepost = $('#RelativePost').val();
            IDs.relativerelation = $('#RelativeRelation').val();

            return IDs
        }

        @*function QualificationListArray()
            {
            var qualifications = []; // Create an array to store qualifications

            $("#qualificationRows tr.form-row").each(function () {
            var row = $(this);


            if (true) {
            var qualification = {
            sno: row.find('td:eq(0) input').val(),
            courseDegree: row.find('td:eq(1) input').val(),
            subjects: row.find('td:eq(2) input').val(),
            nameOfBoardUniversity: row.find('td:eq(3) input').val(),
            yearOfPassing: row.find('td:eq(4) input').val(),
            marksObtained: row.find('td:eq(5) input').val(),
            totalMarks: row.find('td:eq(6) input').val(),
            percentage: row.find('td:eq(7) input').val()
            };

            qualifications.push(qualification);
            }
            });

            return qualifications;
            }*@

            function QualificationListArray() {
                var qualifications = [];

                $("#nav-PendingDIDestination .form-row").each(function () {
                    var row = $(this);

                    var qualification = {
                        sno: row.find('input[name^="listAtrmsQualificationDtl"][name$=".Sno"]').val(),
                        qualification: row.find('input[name^="listAtrmsQualificationDtl"][name$=".Qualification"]').val(),
                        subject: row.find('input[name^="listAtrmsQualificationDtl"][name$=".Subject"]').val(),
                        nameOfBoard: row.find('input[name^="listAtrmsQualificationDtl"][name$=".NameOfBoard"]').val(),
                        yearOfPassing: row.find('input[name^="listAtrmsQualificationDtl"][name$=".YearOfPassing"]').val(),
                        marksObtained: row.find('input[name^="listAtrmsQualificationDtl"][name$=".MarksObtained"]').val(),
                        totalMarks: row.find('input[name^="listAtrmsQualificationDtl"][name$=".TotalMarks"]').val(),
                        percentage: row.find('input[name^="listAtrmsQualificationDtl"][name$=".Percentage"]').val()
                    };

                    qualifications.push(qualification);
                });

                return qualifications;
            }

        function ExperienceListArray() {
            var experiences = [];

            $("#experienceRows tr.form-row").each(function () {
                var row = $(this);
                var experience = {
                    sno: row.find('td:eq(0) input').val(),
                    nameOfOrganization: row.find('td:eq(1) input').val(),
                    jobPosition: row.find('td:eq(2) input').val(),
                    jobDescription: row.find('td:eq(3) input').val(),
                    periodFrom: row.find('td:eq(4) input').val(),
                    periodTo: row.find('td:eq(5) input').val(),
                    lastSalaryDrawn: row.find('td:eq(6) input').val()
                };

                experiences.push(experience);
            });

            return experiences;
        }

        function AttachmentListArray() {
            var IDs = new Array();
            $("#HrmsHrdGrid TBODY TR").each(function () {
                var row = $(this);
                debugger;
                var type = row.find('td:eq(3)').text();
                if (type.includes("Ready")) {
                    var uploadFile = {};
                    uploadFile.fileName = $('#FIRST_NAME').val();
                    //uploadFile.atId = $('#AT_ID').val();
                    uploadFile.name = row.find('td:eq(0)').html();
                    uploadFile.fileSize = row.find('td:eq(1) input').val();
                    uploadFile.mimeType = row.find('td:eq(2) input').val();
                    uploadFile.uploadFile = row.find('td:eq(3) input').val();


                    IDs.push(uploadFile);
                }
            });
            console.log(IDs)

            return IDs
        }


    </script>


</body>
</html>