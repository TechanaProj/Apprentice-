@model USERFORM.ViewModels.USERF01ViewModel
@using Microsoft.AspNetCore.Http;
@{
    ViewData["Title"] = "Create";
    Layout = null;
}



@*@{
        Layout = "~/Views/Shared/_Layout.cshtml";
    }*@

@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

@*<script src="~/js/C</script>*@



<!-- Include jQuery -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<!-- Include Select2 -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/js/select2.min.js"></script>


<!-- Add Bootstrap CSS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">


<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

@*Add Bootstrap JavaScript and jQuery (Popper.js is required for some Bootstrap components)*@
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.min.js"></script>

<script src="https://cdn.jsdelivr.net/npm/popper.js@2.11.6/dist/umd/popper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>




<head>
    <meta charset="UTF-8">


    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ATRMS</title>
    <style>

        .bContainer {
            border: 1px solid #ccc;
            border-radius: 8px;
            padding: 2%;
            margin: 2% auto;
            max-width: 100%; /* Adjust as needed */
        }
        /* Add this CSS to your stylesheet or in a style tag */
        /*.nanoimage {
            width: 100%;*/ /* Make the image fill its container horizontally */
        /*height: 100%;*/ /* Make the image fill its container vertically */
        /*object-fit: cover;*/ /* Maintain the aspect ratio and cover the entire container */
        /*border: 2px solid red;*/ /* You can customize the border color */
        /*}

        .smallcontainer {
            position: absolute;
            top: 205px;
            left: 20px;
            width: 250px;
            height: 680px;
            border: 2px solid black;

        }*/
        /* Add borders to table cells */
        .colored-table th,
        .colored-table td {
            border: 1px solid #000;
            padding: 8px; /* Add padding for better appearance */
        }

        /* Style the header row differently if needed */
        .colored-table thead tr {
            background-color: #E1F8DC; /* Header background color */
            font-weight: bold;
        }

        /* Style the cells in the first column differently if needed */
        .colored-table td:first-child {
            font-weight: bold;
        }

        /* Style the colored-cell class */
        .colored-cell {
            background-color: #E1F8DC;
            font-weight: bold;
        }

        .colored-cell {
            background-color: #E1F8DC;
            font-weight: bold;
        }

        .filled-button {
            background-color: green;
            /* Add any other styles you want for the filled button */
        }

        .bold-red-message {
            font-weight: bold;
            color: red;
        }

        p {
            padding-left: 25px; /* Adjust as needed for spacing */
        }

        /*#checkcr {
            margin-right: 10px;*/ /* Add margin for spacing between checkbox and text */
        /*}*/

        .card {
            position: relative;
        }

        #checkcr {
            position: absolute;
            left: 5px;
            top: 12px; /* Adjust as needed */
            transform: translateY(-50%);
            margin-right: 10px; /* Adjust as needed for spacing */
        }

        p {
            /* Add styles for the paragraph if necessary */
        }


        #checkcr:checked + p {
            color: green;
        }

        #checkcr:not(:checked) + p {
            color: red;
        }

        /* Style for the label */
        /* Style for the label */
        label {
            font-weight: bold;
            font-family: 'Cambaria', sans-serif; /* Replace 'Cambaria' with the actual font name */
            color: brown; /* Set the text color to a blue shade */
            display: block; /* Ensures each label appears on a new line */
            margin-bottom: 5px; /* Adds a small bottom margin for spacing */
        }



        /* Style for the placeholder text */
        ::placeholder {
            color: #666; /* Set a slightly darker color for the placeholder text */
            font-style: normal; /* Italicize the placeholder text */
            font-weight: normal; /* Set normal font weight */
            font-size: 14px; /* Adjust the font size */
            text-align: center; /* Center the placeholder text */
            opacity: 0.8; /* Reduce the opacity for a subtle effect */
            /* You can add more styles based on your preferences */
        }


        .same-as-permanent {
            background-color: lightgray; /* Set your desired background color */
        }
        /* Add a border at the bottom of the first row */
        .custom-line {
            background: linear-gradient(to right, #e74c3c, #f39c12, #3498db, #2ecc71, #9b59b6);
            height: 3px;
            border: none;
            margin-bottom: 20px;
            animation: glow 1s ease-in-out infinite alternate;
        }
        /* .card {
                    margin: 20px 0;
                    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
                }

        */


        /* /* Style for the body to make it full screen */
        body {
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            align-items: center;
            background-color: #f2f2f2;
            /*background-image: url('../images/Aonla-new.jpg');*/
        }

        /* Style for the header bar */
        /* Style for the header image */


        /* Style for the header bar */
        .header-bar {
            position: fixed;
            border-radius: 10px;
            background-color: #4CAF50;
            width: 100%;
            z-index: 1000; /* Ensure it's above other elements */
            display: flex;
            align-items: center;
            justify-content: space-between;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            padding: 10px; /* Add padding for better spacing */
        }


        /* Ensure the header text is responsive */
        .header-text {
            color: white;
            font-size: 2.0vw; /* Use viewport width for flexible font size */
            font-weight: bold;
            font-family: "Roboto", "Arial", sans-serif;
            text-align: center;
            flex-grow: 1; /* Allow it to grow and fill the space */
        }

        /* Optional: Add a container for additional styling or layout adjustments */
        .header-container {
            max-width: 2000PX; /* Set a maximum width for the container */
            width: 100%;
            margin: 0 auto; /* Center the container */
        }



        /* Style for tabs container */
        .tabs-container {
            display: flex;
            width: 63%; /* Adjust the width as needed */
            background-color: floralwhite;
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
            margin-top: 103px; /* Adjust the margin as needed */
        }

        /* Ensure the header text is responsive */
        .tab-text {
            display: flex;
            /*color: saddlebrown;*/
            color: black;
            font-size: 0.9vw; /* Use viewport width for flexible font size */
            font-weight: bold;
            font-family: "Roboto", "Arial", sans-serif;
            text-align: center;
            flex-grow: 1; /* Allow it to grow and fill the space */
        }

        .container {
            /* Adjust the width as needed */
            display: flex; /* Adjust the height as needed */
            background-color: white;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            margin-top: 10px; /* Adjust the margin as needed */
        }
        /* Rest of your existing styles for tabs, buttons, etc. */


        /* Style for active tab */
        .active-tab {
            display: block;
        }

        /* Style for tab buttons */
        .tab-button-container {
            display: flex;
            height: 40px;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 7px;
            margin-top: 4px;
        }

        .tab-button {
            cursor: pointer;
            padding: 10px 15px; /* Adjusted padding for smaller buttons */
            background-color: tomato;
            border: 2px solid #ccc;
            border-radius: 2px; /* Adjusted border radius for smaller buttons */
            transition: background-color 0.3s ease, box-shadow 0.3s ease; /* Smooth transition on hover */
            margin-right: 5px; /* Add margin to create a gap between buttons */
            box-shadow: 0 2px 16px rgba(0, 0, 0, 0.1); /* Add shadow */
        }

            .tab-button:last-child {
                margin-right: 5px; /* Remove right margin for the last button */
            }

            .tab-button:hover {
                background-color: lightgray; /* Change color on hover */
                box-shadow: 0 4px 16px rgba(0, 0, 0, 0.2); /* Add shadow on hover */
            }

            .tab-button.active {
                background-color: #4CAF50; /* Color for active state */
                color: white; /* Text color for active state */
                border-color: #4CAF50; /* Border color for active state */
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); /* Add shadow for active state */
            }





        /*.tab-button {
                    cursor: pointer;
                    padding: 25px;*/ /* Increased button size */
        /*background-color: #f2f2f2;
                    border: 5px solid #ccc;
                    border-radius: 25%;*/ /* Makes buttons circular */
        /*}*/
        .line {
            flex: 1;
            border-top: 1px solid #ccc;
        }

        /* Style for completed tab buttons */
        .completed-button {
            background-color: #4CAF50; /* Green color for completed steps */
            color: white;
        }


        /*/ Style for the navigation buttons */
        .navigation-buttons {
            text-align: center;
            margin-top: 60px;
        }


        /* Style for the header image */
        /* Style for the header image */
        .header-image {
            width: auto; /* Adjust width for responsiveness */
            height: 70px; /* Adjust height for consistency */
            margin-right: 10px; /* Add margin for spacing */
        }


        /* Define a CSS class for a row containing three form fields */


        /* Add similar styles for other form elements if needed */
        /* Define a CSS class for an orange button */
        .orange-button {
            background-color: orange;
            color: bisque; /* Text color */
            border: none; /* Remove the border */
            padding: 10px 20px; /* Add some padding for spacing */
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 16px;
            margin: 4px 2px;
            cursor: pointer;
            border-radius: 4px; /* Rounded corners */
        }

            /* Style the button on hover */
            .orange-button:hover {
                background-color: darkorange; /* Change color on hover */
            }

        .sub-heading1.sub-heading2 {
            border: 2px solid skyblue; /* Add a solid sky blue border */
            background-color: deepskyblue; /* Fill the background with sky blue */
            color: white; /* Set the text color to white */
            padding: 5px 10px; /* Add some padding for spacing */
            border-radius: 10px; /* Round the corners (adjust the value as needed) */
        }

        /* Add new styles for dark mode */
        body.dark-mode {
            background-color: #333;
            color: #fff;
        }

        /* Add new styles for eye-safe mode */
        body.eyesafe-mode {
            background-color: #f7f7f7;
            color: #333;
        }

        /* Make text more readable in both modes */
        body.dark-mode, body.eyesafe-mode {
            color: #ccc; /* Adjust the text color for better readability */
        }


        /* Style for moon and sun icons */
        .moon-icon,
        .sun-icon {
            font-size: 20px;
        }

        .preview-container {
            display: flex;
        }


        body.blur {
            filter: blur(0px); /* Adjust the blur amount as needed */
            transition: filter 0.3s ease; /* Add a smooth transition effect */
        }

        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(10px);
            z-index: 1000;
            display: none;
        }

        .blur-area {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(10px);
            z-index: 1000;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .loading-spinner {
            position: absolute;
            left: 50%;
            top: 50%;
            transform: translate(-50%, -50%);
            height: 280px;
            width: 400px;
            display: flex;
            justify-content: center;
            align-items: center;
            background: none;
        }

        .loading-spinner-img {
            max-width: 150%;
            max-height: 150%;
            width: auto;
            height: auto;
        }


        .form-control {
            background-color: white;
            font-weight: bold;
        }

        .custom-select {
            position: relative;
        }

            .custom-select select {
                /*appearance: none;*/
                -webkit-appearance: none;
                -moz-appearance: none;
                width: 100%;
                padding: 8px;
                border: 1px solid #ccc;
                border-radius: 4px;
                cursor: pointer;
            }

            .custom-select::after {
                content: '\f078'; /* Unicode character for the down arrow icon in Font Awesome */
                font-family: 'Font Awesome 5 Free';
                font-weight: 900;
                position: absolute;
                top: 50%;
                right: 10px;
                transform: translateY(-50%);
                pointer-events: none;
            }

        .footer {
            background-color: #333; /* Set your desired background color */
            color: #fff; /* Set your desired text color */
            padding: 10px; /* Adjust the padding as needed */
            position: fixed;
            bottom: 0;
            width: 100%;
            text-align: center;
        }
    </style>
</head>


<div class="header-bar header-container">

    <img src="~/images/iffcoGImg.jpg" alt="Header Image" class="header-image">
    <div class="header-text" style="text-align: center;">Welcome To The Online Recruitment Application Portal For IFFCO Aonla Unit </div>
    <!-- Bootstrap Modal Button -->
    <button type="button" class="btn btn-info custom-red-text" data-toggle="modal" data-target="#myModal">Click Here For Technical Help</button>
    <!-- Button to trigger the modal -->
    @*<button type="button" class="btn btn-primary" data-toggle="modal" data-target="#videoDetailsModal">
            View Video Details
        </button>*@
</div>
<div class="tabs-container">
    <div class="tab-button-container">
        <div class="tab-button active-button tab-text" id="tab1-button" onclick="openTab('tab1')" style="text-align: center;">Click Here To Fill Personal Details</div>
        <div class="line"></div>
        <div class="tab-button tab-text " id="tab2-button " onclick="openTab('tab2')">Click Here To Fill Qualification Details</div>
        <div class="line"></div>

        <div class="tab-button tab-text " id="tab3-button " onclick="openTab('tab3')">Click Here To Upload Documents</div>
        <div class="line"></div>
        <div class="tab-button tab-text " id="tab4-button " onclick="openTab('tab4')">Final Submittion</div>

    </div>
</div>
@*<div class=smallcontainer >
        <img src="~/images/nanoss.jpg" alt="Header Image" class="nanoimage">
    </div>*@
<div class="container">
    <form id="CreateForm" asp-area="M1" asp-controller="USERF01" asp-action="Create" onsubmit="return Validate();" method="post">
        <div id="tab1" class="tab active-tab">
            <!-- Content for Tab 1 -->
            <h3 class="sub-heading1 sub-heading2"><span>PERSONAL DETAILS</span></h3>

            <div class="row form-sm">
                <div class="col-sm-2 col-md-4">
                    <label for="Qualification">Highest Qualification<span style="color: red;">*</span></label>
                    <div class="custom-select">
                        <select id="HqualName-Create" class=" form-control colored-input custom-select" onchange="bindddl1('Create')" style="width:100%" asp-items='@(new SelectList(Model.HighestqualificationLOVBind,"Value","Text"))' required>
                            <option style="text-align: center;">---Select Your Highest Qualification---</option>
                        </select>
                    </div>


                </div>

                <div class="col-sm-2 col-md-4">


                    <label for="PostAppliedDescription">Post Selection<span style="color: red;">*</span></label>
                    <div class="custom-select">
                        <select @*id="PostAppliedDescription"*@ id="PostName-Create" class="form-control custom-select " style="width:100%" required>
                            <option style="text-align: center;">---Select Post---</option>"
                        </select>
                    </div>

                    <input type="hidden" id="PostAppliedCode" asp-for="@Model.objAtrmsPersonalDtl.PostAppliedCode" />
                    <input type="hidden" id="RecCode" asp-for="@Model.objAtrmsPersonalDtl.RecCode" />

                    @*<input type="hidden" id="otpFlag" value="@Model.OtpFlag" />*@

                    @*<label for="PostAppliedDescription">Post Selection</label>

                        <select class="form-control" id="PostAppliedDescription" asp-for="objAtrmsPersonalDtl.PostAppliedDescription" asp-items="@(new SelectList(Model.PostdescriptionLOVBind,"Value","Text"))"></select>
                        <input type="hidden" id="PostAppliedCode" asp-for="@Model.objAtrmsPersonalDtl.PostAppliedCode" />
                        <input type="hidden" id="RecCode" asp-for="@Model.objAtrmsPersonalDtl.RecCode" />*@


                </div>

            </div>
            <br>
            <div class="custom-line"></div>
            <div class="row form-sm">
                <div class="col-sm-12 col-md-4">
                    <label for="txtName">First Name <span style="color: red;">*</span></label>
                    <input type="text" id="txtName" class="form-control" placeholder="Enter First Name" required>
                </div>


                <div class="col-sm-12 col-md-4">
                    <label for="MIDDLE_NAME">Middle Name</label>
                    <input type="text" class="form-control" id="MIDDLE_NAME" placeholder="Enter Middle Name" required>
                </div>

                <div class="col-sm-12 col-md-4">
                    <label for="LAST_NAME">Last Name</label>
                    <input type="text" class="form-control" id="txtLASTNAME" placeholder="Enter Last Name" required>
                </div>
            </div>


            <br />
            <div class="row form-sm">
                <div class="col-sm-2 col-md-4">
                    <label for="FATHER_NAME">Father's Name<span style="color: red;">*</span></label>
                    <input type="text" class="form-control" id="FATHER_NAME" placeholder="Enter Father Name" required>
                    <div class="text-danger validation-error" id="fathernameError" style="display: none;">Please Enter Father Name!</div>
                </div>

                <div class="col-sm-2 col-md-4">
                    <label for="FATHER_OCCUPATION">Father's Occupation<span style="color: red;">*</span></label>
                    <input type="text" class="form-control" id="FATHER_OCCUPATION" placeholder="Enter Father Occupation" required>
                    <div class="text-danger validation-error" id="fatheroccupationError" style="display: none;">Please Enter Father Occupation!</div>
                </div>
                <div class="col-sm-2 col-md-4">
                    <label for="MOTHER_NAME">Mother's Name<span style="color: red;">*</span></label>
                    <input type="text" class="form-control" id="MOTHER_NAME" placeholder="Enter Mother Name" required>
                    <div class="text-danger validation-error" id="mothernameError" style="display: none;">Please Enter Mother Name!</div>
                </div>


                <div class="col-sm-2 col-md-4">
                    <label for="MOTHER_OCCUPATION">Mother's Occupation<span style="color: red;">*</span></label>
                    <input type="text" class="form-control" id="MOTHER_OCCUPATION" placeholder="Enter Mother Occupation" required>
                </div>


                <div class="col-sm-2 col-md-4">
                    <label for="Religion">Religion<span style="color: red;">*</span></label>
                    <div class="custom-select">
                        <select class="form-control" id="Religion">
                            <option value="" disabled selected style="text-align: center;">---Select Religion---</option>
                            <option value="HINDU">HINDU</option>
                            <option value="MUSLIM">MUSLIM</option>
                            <option value="CHRISTIAN">CHRISTIAN</option>
                            <option value="SIKH">SIKH</option>

                        </select>
                    </div>

                    <div class="text-danger validation-error" id="religionplaceError" style="display: none;">Please Select Religion</div>
                </div>

                <div class="col-sm-2 col-md-4">
                    <label for="BIRTH_PLACE">Birth Place<span style="color: red;">*</span></label>
                    <input type="text" class="form-control" id="BIRTH_PLACE" placeholder="Enter Birth Place">
                    <div class="text-danger validation-error" id="birthplaceError" style="display: none;">Please Enter Birth Place</div>
                </div>

            </div>
            <br />
            <div class="row form-sm">
                <div class="col-sm-2 col-md-4">
                    <label for="GENDER">Gender<span style="color: red;">*</span></label>

                    <div class="custom-select">
                        <select class="form-control" id="GENDER" required>
                            <option value="select" disabled selected style="text-align: center;">---Select Gender---</option>
                            <option value="MALE">MALE</option>
                            <option value="FEMALE">FEMALE</option>

                        </select>
                    </div>

                    <div class="text-danger validation-error" id="genderError" style="display: none;">Please Select Gender!</div>
                </div>

                <div class="col-sm-2 col-md-4">
                    <label for="CATEGORY">Category<span style="color: red;">*</span></label>
                    <div class="custom-select">
                        <select class="form-control" id="CATEGORY" onchange="updateDateRange();" required>
                            <option value="" disabled selected style="text-align: center;">---Select Category---</option>
                            <option value="General">GENERAL</option>
                            <option value="OBC">OBC</option>
                            <option value="SC">SC</option>
                            <option value="ST">ST</option>

                        </select>
                    </div>

                    <div class="text-danger validation-error" id="categoryError" style="display: none;">Please Select Category!</div>
                </div>
                <div class="col-sm-2 col-md-4">
                    <label for="NATIONALITY">Nationality<span style="color: red;">*</span></label>
                    <div class="custom-select">
                        <select class="form-control" id="NATIONALITY" required>
                            <option value="" disabled selected style="text-align: center;">---Select---</option>
                            <option value="INDIAN">INDIAN</option>

                        </select>
                    </div>

                    <div class="text-danger validation-error" id="nationalityError" style="display: none;">Please Enter Nationality!</div>
                </div>
            </div>
            <br />
            <div class="row form-sm">
                <div class="col-sm-2 col-md-4">
                    <label for="IDENTIFICATION_MARK">Identification Mark<span style="color: red;">*</span></label>
                    <input type="text" class="form-control" id="IDENTIFICATION_MARK" placeholder="Enter Identification Marks">
                </div>

                <div class="col-sm-1 col-md-4">
                    <label for="LandLoser"> IFFCO Deceased Employee || Landloser ||<span style="color: red;">*</span> </label>
                    <div class="custom-select">
                        <select class="form-control" id="LandLoser" onchange="updateDateRange();" required>
                            <option value="" disabled selected style="text-align: center;">---Select---</option>
                            <option value="YES">YES</option>
                            <option value="NO">NO</option>
                        </select>
                        <div class="down-icon"></div>
                    </div>
                </div>

                <div class="col-sm-1 col-md-2">
                    <label for="DATE_OF_BIRTH">Date Of Birth<span style="color: red;">*</span></label>
                    <div class="input-group">
                        <input type="date" class="form-control" id="DATE_OF_BIRTH" placeholder="Enter Date of Birth">

                        <div class="col-sm-1 col-md-2">
                            <button class="btn btn-outline-secondary" type="button" data-toggle="modal" data-target="#myModal1">Info</button>
                        </div>
                    </div>
                    <div class="text-danger validation-error" id="birthplaceError" style="display: none;">Please Enter Birth Place</div>
                </div>

            </div>

            <br />
            <div class="row form-sm">
                <div class="col-sm-2 col-md-4">
                    <label for="EMAIL_ID">Email Id<span style="color: red;">*</span></label>
                    <input type="email" class="form-control" id="EMAIL_ID" placeholder="Enter Email Id">
                    <div class="text-danger validation-error" id="emailidError" style="display: none;">Please Enter Valid Email Id!</div>
                </div>

                <div class="col-sm-2 col-md-4">
                    <label for="ALTERNATE_EMAIL_ID">Alternate Email</label>
                    <input type="email" class="form-control" id="ALTERNATE_EMAIL_ID" placeholder="Enter Alternate Email Id">
                </div>
                <div class="col-sm-2 col-md-4">
                    <label for="AADHAR_NO">Aadhaar Number<span style="color: red;">*</span></label>
                    <input type="text" class="form-control" id="AADHAR_NO" placeholder="Enter Aadhaar No" required maxlength="12">

                </div>
            </div>
            <br />
            <div class="row form-sm">
                <div class="col-sm-2 col-md-4">
                    <label for="MOBILE_NUMBER">Mobile Number<span style="color: red;">*</span></label>
                    <input type="text" class="form-control" id="MOBILE_NUMBER" placeholder="Enter Mobile No." required maxlength="10">
                    <button type="button" class="btn btn-primary btn-sm" id="sendOTPButton" onclick="sendOTP()">Send OTP</button>
                    <button type="button" class="btn btn-primary btn-sm" id="resendOTPButton" style="display: none;" onclick="resendOTP()">Resend OTP</button>
                    <div class="text-danger validation-error" id="mobileNumberError" style="display: none;">Please Enter Valid 10 digit Mobile No!</div>
                    <div id="otpMessage" class="bold-red-message" style="display: none;"></div> <!-- New div to display OTP message -->
                </div>
                <div class="col-sm-2 col-md-4">
                    <label for="OTP">Enter OTP<span style="color: red;">*</span></label>
                    <input type="text" class="form-control" id="OTP" placeholder="Enter OTP" required>
                    <button type="button" class="btn btn-primary btn-sm" onclick="verifyOTP()">Verify OTP</button>
                    <div class="text-danger validation-error" id="otpError" style="display: none;">Please Enter Valid OTP!</div>
                    <div id="countdownMessage" class="bold-red-message" style="display: none;"></div>
                </div>
            </div>



            <br />
            <div class="row form-sm">

                <div class="col-sm-2 col-md-4">
                    <label for="ALTERNATE_NUMBER">Alternate Number</label>
                    <input type="text" class="form-control" id="ALTERNATE_NUMBER" placeholder="Enter Alternate No." required maxlength="10">
                    <div class="text-danger validation-error" id="altmobileNumberError" style="display: none;">Please Enter alternate Mobile No!</div>
                </div>
                <div class="col-sm-2 col-md-4">
                    <label for="MARITAL_STATUS">Marital Status<span style="color: red;">*</span></label>
                    <div class="custom-select">
                        <select class="form-control " id="MARITAL_STATUS" required>
                            <option value="" disabled selected style="text-align: center;">---Select Marital Status---</option>
                            <option value="SINGLE">SINGLE</option>
                            <option value="MARRIED">MARRIED</option>
                            <option value="DIVORCED">DIVORCED</option>
                            <option value="WIDOWED">WIDOWED</option>
                            <option value="OTHER">OTHER</option>
                        </select>

                    </div>

                    <div class="text-danger validation-error" id="maritalstatusError" style="display: none;">Please Select Marital Status!</div>
                </div>

            </div>


            <div class="bContainer">
                <div class="row form-sm">

                    <div class="col-sm-2 col-md-12">
                        <label for="P_ADDRESS">Permanent Address<span style="color: red;">*</span></label>
                        <input type="text" class="form-control" id="P_ADDRESS" placeholder="Enter Permanent Address" required>
                        <div class="text-danger validation-error" id="paddressError" style="display: none;">Please Enter PAddress!</div>
                    </div>

                </div>
                <br />

                <div class="row form-sm">
                    <div class="col-sm-2 col-md-4">
                        <label for="HOUSE_NO">House No<span style="color: red;">*</span></label>
                        <input type="text" class="form-control" id="HOUSE_NO" placeholder="Enter House No.">
                        <div class="text-danger validation-error" id="housenoError" style="display: none;">Please Enter Valid House No!</div>
                    </div>
                    <div class="col-sm-2 col-md-4">
                        <label for="STREET">Street<span style="color: red;">*</span></label>
                        <input type="text" class="form-control" id="STREET" placeholder="Enter Street">
                    </div>
                    <div class="col-sm-2 col-md-4">
                        <label for="AREA">Area<span style="color: red;">*</span></label>
                        <input type="text" class="form-control" id="AREA" name="AREA" placeholder="Enter Area">
                    </div>
                </div>
                <br />

                <div class="row form-sm">
                    <div class="col-sm-2 col-md-12">
                        <label for="C_ADDRESS">Current Address<span style="color: red;">*</span></label>
                        <input type="text" class="form-control" id="C_ADDRESS" placeholder="Enter Current Address" required>
                        <div class="text-danger validation-error" id="caddressError" style="display: none;">Please Enter CAddress!</div>
                        <div class="row form-sm">
                            <div class="col-sm-12">
                                <div class="form-check">
                                    <input type="checkbox" class="form-check-input" id="sameAsPermanent">
                                    <label class="form-check-label" for="sameAsPermanent" style="color: darkturquoise;">Same as Permanent Address</label>

                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>


            <div class="row form-sm">
                <div class="col-sm-2 col-md-4">
                    <label for="STATE">State<span style="color: red;">*</span></label>
                    <div class="custom-select">
                        <select id="StateName-Create" class="form-control" onchange="bindddl('Create')" style="width:100%" asp-items="@(new SelectList(Model.StateLOV,"Value","Text")) " required>
                            <option style="text-align: center;">-----Select State-----</option>"
                        </select>
                    </div>

                </div>
                <div class="col-sm-2 col-md-4">
                    <label for="DISTRICT">District<span style="color: red;">*</span></label>
                    <div class="custom-select">
                        <select id="DistrictName-Create" class="form-control" style="width:100%" required>
                            <option style="text-align: center;">-----Select District-----</option>"
                        </select>
                    </div>

                </div>
                <div class="col-sm-2 col-md-4">
                    <label for="CITY">City<span style="color: red;">*</span></label>
                    <input type="text" class="form-control" id="CITY" placeholder="Enter City Name">
                    <div class="text-danger validation-error" id="cityError" style="display: none;">Please Enter City!</div>
                </div>
            </div>
            <br />
            <div class="row form-sm">
                <div class="col-sm-2 col-md-4">
                    <label for="HOMETOWN">Hometown<span style="color: red;">*</span></label>
                    <input type="text" class="form-control" id="HOMETOWN" placeholder="Enter Hometown">
                </div>
                <div class="col-sm-2 col-md-4">
                    <label for="PINCODE">Pincode<span style="color: red;">*</span></label>
                    <input type="text" class="form-control" id="PINCODE" placeholder="Enter Pin Code" required maxlength="06">
                    <div class="text-danger validation-error" id="pincodeError" style="display: none;">Please Enter Pincode!</div>
                </div>

                <div class="col-sm-2 col-md-4">
                    <label for="COUNTRY">Country<span style="color: red;">*</span></label>
                    <input type="text" class="form-control" id="COUNTRY" placeholder="Enter Your Country Name" value="INDIA" readonly>
                    <div class="text-danger validation-error" id="countryError" style="display: none;">Please Enter Country!</div>
                </div>

            </div>
            <br />
            <div style="margin: 0 auto; padding: 20px; text-align: center; background-color: #f0f0f0;">
                <h1 style="font-size: 1.5rem; margin: 0; font-family: Arial, sans-serif; color: red; font-weight: bold;">Click on the tab button above to move to the next tab.</h1>
            </div>


        </div>
        <div id="tab2" class="tab">

            <div class="m-form">
                <h3 class="sub-heading1 sub-heading2"><span>EDUCATION DETAILS</span> </h3>
                <div class="m-form-bx ">
                    <!-- Education Details Header -->
                    <table class="table">
                        <thead>
                            <tr class="header-row">
                                <th style="color: brown; font-weight: bold;" d>Sno<span style="color: red;">*</span></th>
                                <th style="color: brown; font-weight: bold;" d>Course/Degree<span style="color: red;">*</span></th>
                                <th style="color: brown; font-weight: bold;" d>Subjects<span style="color: red;">*</span></th>
                                <th style="color: brown; font-weight: bold;" d>Name Of Board / University<span style="color: red;">*</span></th>
                                <th style="color: brown; font-weight: bold;" d>Year Of Passing(YYYY)<span style="color: red;">*</span></th>
                                <th style="color: brown; font-weight: bold;" d>Roll No<span style="color: red;">*</span></th>
                                <th style="color: brown; font-weight: bold;" d>Marks Obtained<span style="color: red;">*</span></th>
                                <th style="color: brown; font-weight: bold;" d>Total Marks<span style="color: red;">*</span></th>
                                <th style="color: brown; font-weight: bold;" d>Percentage</th>
                                @*<th><a href="Javascript:void(0);" class="m-btn-1 addnew" onclick="AddNewRowFunc(this);"><i class="material-icons"></i><span style="color: white"> New Row</span></a></th>*@


                            </tr>
                        </thead>
                        <tbody id="educationTableBody">
                        </tbody>
                    </table>

                </div>

            </div>
            <div class="m-form ">
                <h3 class="sub-heading1 sub-heading2 "><span>OTHERS DETAILS</span></h3>
                <div class="m-form-bx ">
                    <div class="row form-sm ">
                        <div class="col-sm-1 col-md-2">
                            <label for="ExApperentice">Ex Apperentice</label>
                            <div class="custom-select">
                                <select class="form-control" id="ExApperentice">
                                    <option disabled selected style="text-align:center;">--Select--</option>
                                    <option value="YES">Yes</option>
                                    <option value="NO">No</option>
                                </select>
                            </div>

                        </div>

                        <div class="col-sm-2 col-md-4">
                            <label for="NameEmpExchange">Name Of Employee Exchange</label>
                            <input type="text" class="form-control" id="NameEmpExchange">
                        </div>
                        <div class="col-sm-2 col-md-4">
                            <label for="RegNoEmpExchange">Reg No Employee Exchange</label>
                            <input type="text" class="form-control" id="RegNoEmpExchange">
                        </div>



                    </div>
                    <br />
                    <div class="row form-sm">

                        <div class="col-sm-1 col-md-4">
                            <label for="MhrdNats">Mhrd / Nats<span style="color: red;">*</span></label>
                            <div class="custom-select">
                                <select class="form-control" id="MhrdNats" required>
                                    <option value="" disabled selected style="text-align: center;">---Select---</option>
                                    <option value="MHRD">MHRD</option>
                                    <option value="NATS">NATS</option>
                                </select>

                            </div>
                        </div>


                        <div class="col-sm-2 col-md-4">
                            <label for="RegNumberMhrdNats">Reg No MHRD/ Reg No NATS<span style="color: red;">*</span></label>
                            <input type="text" class="form-control" id="RegNumberMhrdNats">
                        </div>


                    </div>
                    <br />

                    <h3 class="sub-heading1 sub-heading2 "><span>RELATIVE DETAILS</span></h3>
                    <div class="m-form-bx ">
                        <div class="row form-sm">
                            <div class="row">
                                <div class="col-sm-6 col-md-4">
                                    <label for="IffcoEmployee">Son/Daughter Of Employee Or Ex-Employee Of IFFCO<span style="color: red;">*</span></label>
                                </div>
                                <div class="col-sm-6 col-md-2">
                                    <div class="custom-select">
                                        <select class="form-control" id="IffcoEmployee">
                                            <option selected disabled style="text-align:center;">--Select--</option>
                                            <option value="YES">Yes</option>
                                            <option value="NO">No</option>
                                        </select>
                                    </div>

                                </div>
                            </div>

                        </div>
                        <table class="table" id="relativeTable" style="display: none;">
                            <thead>
                                <tr class="header-row">
                                    <th>RELATIVE_EMP_ID<span style="color: red;">*</span></th>
                                    <th>RELATIVE_NAME<span style="color: red;">*</span></th>
                                    <th>RELATIVE_UNIT<span style="color: red;">*</span></th>
                                    <th>RELATIVE_POST<span style="color: red;">*</span></th>
                                    <th>RELATIVE_RELATION<span style="color: red;">*</span></th>
                                </tr>
                            </thead>
                            <tbody id="relativeRows">
                                <!-- Initial Row -->
                                <tr class="form-row">
                                    <td><input type="text" class="form-control" id="RelativeEmpId" /></td>
                                    <td><input type="text" class="form-control" id="RelativeName" /></td>
                                    <td><input type="text" class="form-control" id="RelativeUnit" /></td>
                                    <td><input type="text" class="form-control" id="RelativePost" /></td>
                                    <td><input type="text" class="form-control" id="RelativeRelation" /></td>
                                </tr>
                                <!-- Additional Rows can be added dynamically using JavaScript -->
                            </tbody>
                        </table>
                    </div>


                </div>


            </div>
            <br />
            <div style="margin: 0 auto; padding: 20px; text-align: center; background-color: #f0f0f0;">
                <h1 style="font-size: 1.5rem; margin: 0; font-family: Arial, sans-serif; color: red; font-weight: bold;">Click on the tab button above to move to the next tab.</h1>
            </div>


        </div>



        <div class="tab" id="tab3">
            <div class="m-form">
                <h3 class="sub-heading1 sub-heading2">
                    <span>ATTACHMENT DETAILS: All Documents must be uploaded in this single PDF</span>
                    <!-- Button trigger modal -->
                    <button type="button" class="btn btn-danger" data-toggle="modal" data-target="#attachmentDetailsModal">
                        Click For Attachments Details
                    </button>
                </h3>
                <div class="m-form-bx">
                    <div class="row form-sm">
                        <div class="col-sm-2 col-md-5">
                            <div class="m-form-bx">
                                <div class="alert alert-info alert-dismissible show" role="alert" style="background-color: moccasin; color: firebrick; border-radius: 15px; font-family: Arial, sans-serif; font-size: 16px; padding: 10px;">
                                    <h4 class="alert-heading" style="font-size: 18px;">File Upload Guidelines!</h4>
                                    <ul>
                                        <li>Only <strong>.pdf</strong>, <strong>.png</strong>, <strong>.jpeg</strong> files will be accepted.</li>
                                        <li>PDF Files must not exceed <strong>5 MB</strong>. and Image File must not exceed <strong>2 MB</strong>.</li>
                                        <li>Files cannot be password protected.</li>
                                        <li>If you have large files, <a href="https://www.compress2go.com/" target="_blank" class="alert-link" style="color: green;">Click here</a> to compress them.</li>
                                    </ul>
                                    <!-- Your close button code here -->
                                </div>
                                <div class="col">
                                    <div class="col-md-6 mb-4">
                                        <div class="form-group">
                                            <label for="imageFile">Choose Image<span style="color: red;">*</span></label>
                                            <input type="file" accept=".jpg, .png" class="form-control" id="imageFile" required>
                                            <div class="text-danger validation-error" id="imageError" style="display: none;">Please select an Image File!</div>
                                            <small class="text-muted">Max size: 2MB</small>
                                        </div>
                                    </div>
                                    <div class="col-md-6 mb-4">
                                        <div class="form-group">
                                            <label for="pdfFile">Choose Document Pdf<span style="color: red;">*</span></label>
                                            <input type="file" accept=".pdf" class="form-control" id="pdfFile">
                                            <div class="text-danger validation-error" id="pdfError" style="display: none;">Please select a PDF File!</div>
                                            <small class="text-muted">Max size: 5MB</small>
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-12">
                                        <div class="form-group">
                                            <!-- Add Reset button -->
                                            <button type="button" class="btn btn-danger" id="resetButton">Reset</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-2 col-md-7">
                            <div class="pd-form-area">
                                <table class="table table-striped table-hover" id="HrmsHrdGrid">
                                    <thead>
                                        <tr>
                                            <th class="text-info">Description</th>
                                            <th class="text-success">Size</th>
                                            <th class="text-warning">Type</th>
                                            <th class="text-primary">Status</th>
                                            <!-- You seem to have an extra empty <th> tag. I've removed it. -->
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <!-- Table rows will go here. -->
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div style="margin: 0 auto; padding: 20px; text-align: center; background-color: #f0f0f0;">
                <h1 style="font-size: 1.0rem; margin: 0; font-family: Arial, sans-serif; color: green; font-weight: bold;">All your files will be automatically uploaded once your form is successfully submitted.</h1>
               
                <h1 style="font-size: 1.5rem; margin: 0; font-family: Arial, sans-serif; color: red; font-weight: bold;">Click on the tab button above to move to the next tab.</h1>
            </div>
        </div>


        <div id="tab4" class="tab">

            <div class="m-form-bx">
                <h3 class="sub-heading1 sub-heading2"><span>DECLARATION<span style="color: red;">*</span></span></h3>
                <br />
                <div class="m-form">
                    <div class="card">
                        <input type="checkbox" id="checkcr" />

                        <p>
                            It is certified that the above information is true and correct and I have not done or doing apprenticeship from any other establishment. If <strong>ANY</strong> of the above information is found to be false at any time, I will be disqualified for employment in IFFCO.
                        </p>
                    </div>

                    <br />
                    <div class="row">
                        <div class="col-sm-1">
                            <label class="input-label">Date</label>
                        </div>
                        <div class="col-sm-2">
                            <input type="date" id="txtSubmitDate" placeholder="DD-MM-YYYY" class="form-control" readonly />
                            <div class="text-danger validation-error" id="submitdateError" style="display: none;">Please Enter Submition date!</div>

                        </div>

                    </div>
                    <br />

                    <div class="row">
                        <div class="col-sm-12">
                            <p class="text-danger" style="text-align: center;"><strong>Ensure Application is Error-Free Before Submitting</strong></p>

                        </div>
                    </div>


                    <div>
                    </div>
                </div>

            </div>

            <div class="navigation-buttons">
                @*<button class="btn btn-primary btn-lg" onclick="previousTab()" style="float:none;margin-right: 10px">Previous</button>*@
                <input type="button" id="createid" value="Submit" class="m-btn-1 save btn btn-primary btn-lg" style="background-color: green;" />
                <button type="button" class="btn btn-primary btn-lg" onclick="togglePreview()" style="float:none;margin-right: 10px; background-color:  darkgoldenrod;">Preview</button>

            </div>


        </div>

        <!-- Bootstrap Modal -->
        <div class="modal" id="myModal">
            <div class="modal-dialog">
                <div class="modal-content">
                    <!-- Modal Header -->
                    <div class="modal-header">
                        <h4 class="modal-title">Contact Information Only For Emergency</h4>
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                    </div>
                    <!-- Modal Body -->
                    <div class="modal-body">
                        <p>If You have Any Technical Issue, Please Contact This No:<br /><strong>05812404103 / 05812404105 / 05812404106/ 05812404137</strong></p>
                        <p>Timing For Contact: <br /><strong>09:00 A.M. To 05:00 P.M.</strong></p>
                        <p>For B.Sc. / ITI candidates: Link for Registration on NAPS Portal <br /><strong><a href="https://www.apprenticeshipindia.gov.in/login">https://www.apprenticeshipindia.gov.in/login</a></strong></p>
                        <p>For Diploma candidates: Link for Registration of MHRD NATS Portal <br /><strong><a href="https://portal.mhrdnats.gov.in/boat/login/user_login.action">https://portal.mhrdnats.gov.in/boat/login/user_login.action</a></strong></p>
                        <p class="text-danger">*Please see the Advertisement, always refresh the link before filling the FORM and use of CHROME Browser is mandatory</p>
                        <p class="text-danger">*Fields marked with Asterisk(*) are compulsory.</p>
                        <p class="text-success"><strong>Print Out will be generated at the end of successful submission</strong></p>
                    </div>
                    <!-- Modal Footer -->
                    <div class="modal-footer">
                        <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Bootstrap Modal -->
        <div class="modal" id="myModal1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <!-- Modal Header -->
                    <div class="modal-header">
                        <h4 class="modal-title">Contact Information Only For Emergency</h4>
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                    </div>
                    <!-- Modal Body -->
                    <div class="modal-body">
                        <p>If You have Any Technical Issue, Please Contact This No:<br /><strong>05812404103 / 05812404105 / 05812404106/ 05812404137</strong></p>
                        <p>Timing For Contact: <br /><strong>09:00 A.M. To 05:00 P.M.</strong></p>

                        <!-- New Section for Age Criteria -->
                        <p><strong>Age Criteria:</strong></p>
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Category</th>
                                    <th>Min (Years)</th>
                                    <th>Max (Years)</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>General</td>
                                    <td>18</td>
                                    <td>27</td>
                                </tr>
                                <tr>
                                    <td>OBC</td>
                                    <td>18</td>
                                    <td>30</td>
                                </tr>
                                <tr>
                                    <td>SC / ST</td>
                                    <td>18</td>
                                    <td>32</td>
                                </tr>
                                <tr>
                                    <td>IFFCO deceased Emp / Land Loser</td>
                                    <td>18</td>
                                    <td>+ 3 years relaxation to the above</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    <!-- Modal Footer -->
                    <div class="modal-footer">
                        <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>

        <div class="modal fade" id="attachmentDetailsModal" tabindex="-1" role="dialog" aria-labelledby="attachmentDetailsModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-lg" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="attachmentDetailsModalLabel">Information Related To Attachements </h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <table class="table">
                            <thead class="thead-dark">
                                <tr>
                                    <th scope="col">SNO.</th>
                                    <th scope="col">Documents Name</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <th scope="row">1</th>
                                    <td>High School Marksheet</td>
                                </tr>
                                <tr>
                                    <th scope="row">2</th>
                                    <td>Intermediate Marksheet</td>
                                </tr>
                                <tr>
                                    <th scope="row">3</th>
                                    <td>ITI* According to Your Qualification</td>
                                </tr>
                                <tr>
                                    <th scope="row">4</th>
                                    <td>Diploma* According to Your Qualification </td>
                                </tr>
                                <tr>
                                    <th scope="row">5</th>
                                    <td>BSc* According to Your Qualification</td>
                                </tr>

                                <tr>
                                    <th scope="row">7</th>
                                    <td>Caste Certificate</td>
                                </tr>
                                <tr>
                                    <th scope="row">8</th>
                                    <td>Aadhaar Card*</td>
                                </tr>
                                <tr>
                                    <th scope="row">9</th>
                                    <td>Relevent Document</td>
                                </tr>

                            </tbody>
                        </table>
                    </div>
                    <div>
                        <p style="text-align: center; color: red; font-size: 18px; font-weight: bold;" class="modal-title" id="attachmentDetailsModalLabel">All documents scanned in single PDF (Max Size of PDF 5 MB)</p>
                    </div>


                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal fade" id="videoDetailsModal" tabindex="-1" role="dialog" aria-labelledby="videoDetailsModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-lg" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="videoDetailsModalLabel">Information Related To Video</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <table class="table">
                            <thead class="thead-dark">
                                <tr>
                                    <th scope="col">SNO.</th>
                                    <th scope="col">Video Details</th>
                                </tr>
                            </thead>
                            <tbody>

                                <tr>
                                    <th scope="row">1</th>
                                    <td>Video Link: <a href="..\images\2024-02-09 12-11-11.mkv" target="_blank">Open Video</a></td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    <div>
                        <p style="text-align: center; color: red; font-size: 18px; font-weight: bold;" class="modal-title" id="videoDetailsModalLabel">Please ensure your video meets the specified requirements.</p>
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>







    </form>




    <div class="blur-area" id="blurArea" style="display:none;">
        <div class="loading-spinner">
            <img src="~/images/ZZ5H.gif" class="loading-spinner-img" alt="Loading..." role="status">
        </div>
    </div>


    <div class="preview-container container" id="previewContainer" style="display: none;">

        <div style="text-align: center; font-size: 1.5em; margin-bottom: 10px;"><strong>APPLICATION FORM PREVIEW</strong></div>

        <div style="max-width: 100%; text-align: center;">
            <img id="previewImage" src="" alt="Preview Image" style="max-width: 100%; max-height: 150px;">
        </div>


        @*<button type="button" class="btn btn-primary btn-lg" onclick="togglePreview()" style="background-color: orangered;">Edit</button>
            <button type="button" class="btn btn-primary btn-lg" onclick="printData()" style="background-color: slategray;">Print</button>
            <input type="button" id="createid" value="Save" class="m-btn-1 save btn btn-primary btn-lg" style="background-color: green;" />*@



    </div>



</div>



<footer class="container">
    <p style="background-color: lightcyan; padding: 10px; width:100%; font-weight:bold; text-align: center;">&copy; 2024 IFFCO. All rights reserved. <br>This page is best viewed on Chrome, Firefox, and all recent Browsers.</p>
    <p></p>
</footer>



<!-- Include datepicker library -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/css/bootstrap-datepicker.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/js/bootstrap-datepicker.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"></script>




<script>


        function showLoadingOverlay() {
            document.body.classList.add('blur');
            document.getElementById('blurArea').style.display = 'flex';
        }

        function hideLoadingOverlay() {
            document.body.classList.remove('blur');
            document.getElementById('blurArea').style.display = 'none';
        }


        var otpTimer;
        var maskedNumber; // Declare maskedNumber as a global variable

        function sendOTP() {


            var mobileNumber = $('#MOBILE_NUMBER').val();
            var emailId = $('#EMAIL_ID').val();

            // Reset the border color of the OTP input field
            $('#OTP').css('border-color', '');

            // Validate mobile number
            if (mobileNumber.length !== 10 || !(/^\d+$/.test(mobileNumber))) {
                // Display validation error message
                $('#mobileNumberError').show();
                return;
            } else {
                // Hide any previous validation error messages
                $('#mobileNumberError').hide();
            }



            // Display message about waiting for OTP
            maskedNumber = mobileNumber.substr(0, mobileNumber.length - 4) + "****" + mobileNumber.substr(mobileNumber.length - 2);

            // Show the OTP message in the designated div with bold red styling
            $('#otpMessage').html('OTP Send to this no this No: <span class="bold-red-message">' + maskedNumber + '</span>. Please wait for 1 minute for OTP or click on Resend OTP.');


            // Show the countdown message in the new div
            //$('#countdownMessage').html('OTP Expires in 5m 0s');
            $('#countdownMessage').show();

            // Toggle the visibility of the "Send OTP" and "Resend OTP" buttons
            $('#sendOTPButton').hide();
            $('#resendOTPButton').show();

            // AJAX POST request
            $.ajax({
                url: window.location.href + '/M1/USERF01/sendOTP', // Replace with your server-side endpoint URL
                type: 'POST',
                data: {
                    MobileNumber: mobileNumber, EmailId: emailId,
                },
                success: function (response) {

                    // Display messages on success
                    alert(response.message);
                    $('#otpMessage').show();
                    // Start the 5-minute countdown
                    startOTPCountdown();

                    // Hide the OTP message upon successful OTP verification
                },
                error: function (error) {
                    // Display messages on error
                    alert(error.responseJSON.message);
                }
            });
        }

        function startOTPCountdown() {
            var countdown = 5 * 60; // 5 minutes in seconds

            otpTimer = setInterval(function () {
                if (countdown <= 0) {
                    clearInterval(otpTimer);
                    $('#otpMessage').html('OTP Expired. Please click on Resend OTP to receive a new OTP.');
                    $('#otpMessage').show();
                    $('#sendOTPButton').hide();
                    $('#resendOTPButton').show();

                    // Hide the countdown message when the countdown is over
                    $('#countdownMessage').hide();
                } else {
                    var minutes = Math.floor(countdown / 60);
                    var seconds = countdown % 60;
                    var timeRemaining = 'OTP Expires in ' + minutes + 'm ' + seconds + 's!';
                    $('#countdownMessage').html(timeRemaining);
                    countdown--;
                }
            }, 1000);
        }




        function stopOTPCountdown() {
            clearInterval(otpTimer);
        }

        function resendOTP() {
            // Reset any relevant state or data as needed
            // For example, you might want to reset the OTP input field and any error messages
            $('#OTP').val('');
            $('#otpError').hide();

            // Stop the previous countdown (if any)
            stopOTPCountdown();

            // Call the sendOTP function to resend the OTP
            sendOTP();
        }
        //function verifyOTP() {
        //    var mobileNumber = document.getElementById("MOBILE_NUMBER").value;
        //    var enteredOTP = document.getElementById("OTP").value;

        //    // Make an AJAX request to the server to verify OTP
        //    // You can use a library like jQuery or fetch API for the AJAX request

        //    // Example using jQuery
        //    $.post(window.location.href + "/M1/USERF01/verifyOTP", { MobileNumber: mobileNumber, enteredOTP: enteredOTP })
        //        .done(function (response) {
        //            alert(response); // Handle success
        //            $('#otpMessage').hide();
        //            $('#countdownMessage').hide();

        //            // Change the color of the OTP input field to green
        //            document.getElementById("OTP").style.borderColor = "green";
        //            document.getElementById("otpError").style.display = "none"; // Hide the error message

        //            document.getElementById("MOBILE_NUMBER").readOnly = true;

        //        })
        //        .fail(function (error) {
        //            alert(error.responseText);

        //            // Clear the OTP input field if OTP doesn't match
        //            document.getElementById("OTP").value = "";
        //            // Optionally, you can also change the color back to the default color
        //            document.getElementById("OTP").style.borderColor = ""; // This will reset to the default color
        //            // Show the error message
        //            document.getElementById("otpError").style.display = "block";
        //        });

        //}
        function verifyOTP() {
            var mobileNumber = document.getElementById("MOBILE_NUMBER").value;
            var enteredOTP = document.getElementById("OTP").value;

            // Make an AJAX request to the server to verify OTP
            // Example using jQuery
            $.post(window.location.href + "/M1/USERF01/verifyOTP", { MobileNumber: mobileNumber, enteredOTP: enteredOTP })
                .done(function (response) {
                    alert(response); // Handle success
                    $('#otpMessage').hide();
                    $('#countdownMessage').hide();

                    if (response === "OTP verification successful.") {
                        // Server-side verification successful, change color on the client side
                        $('#otpFlag').val("Y");
                        changeInputFieldColor("OTP", "green");
                        document.getElementById("OTP").readOnly = true;
                        document.getElementById("MOBILE_NUMBER").readOnly = true;
                    } else {
                        // Server-side verification failed, show error message
                        showError("otpError", response);
                    }
                })
                .fail(function (error) {
                    alert(error.responseText);
                    // Handle AJAX request failure
                });
        }

        function changeInputFieldColor(elementId, color) {
            document.getElementById(elementId).style.borderColor = color;
        }

        function showError(elementId, message) {
            var errorElement = document.getElementById(elementId);
            errorElement.style.display = "block";
            errorElement.innerText = message;
        }


        //function verifyOTP() {
        //    var mobileNumber = document.getElementById("MOBILE_NUMBER").value;
        //    var enteredOTP = document.getElementById("OTP").value;

        //    // Make an AJAX request to the server to verify OTP
        //    // You can use a library like jQuery or fetch API for the AJAX request

        //    // Example using jQuery
        //    $.post("/M1/USERF01/verifyOTP", { MobileNumber: mobileNumber, enteredOTP: enteredOTP })
        //        .done(function (response) {
        //            alert(response); // Handle success
        //            $('#otpMessage').hide();

        //            // Change the color of the OTP input field to green
        //            document.getElementById("OTP").style.borderColor = "green";
        //            document.getElementById("otpError").style.display = "none"; // Hide the error message

        //            // Stop the countdown when OTP is successfully verified
        //            stopOTPCountdown();
        //        })
        //        .fail(function (error) {
        //            alert(error.responseText);

        //            // Clear the OTP input field if OTP doesn't match
        //            document.getElementById("OTP").value = "";
        //            // Optionally, you can also change the color back to the default color
        //            document.getElementById("OTP").style.borderColor = ""; // This will reset to the default color
        //            // Show the error message
        //            document.getElementById("otpError").style.display = "block";
        //        });
        //}





        document.getElementById("txtName").addEventListener("input", function () {
            validateNameInput("txtName");
        });

        document.getElementById("MIDDLE_NAME").addEventListener("input", function () {
            validateNameInput("MIDDLE_NAME");
        });

        document.getElementById("txtLASTNAME").addEventListener("input", function () {
            validateNameInput("txtLASTNAME");
        });


        //VALIDATE1

        document.getElementById("FATHER_NAME").addEventListener("input", function () {
            validateNameInput1("FATHER_NAME");
        });
        document.getElementById("FATHER_OCCUPATION").addEventListener("input", function () {
            validateNameInput1("FATHER_OCCUPATION");
        });


        document.getElementById("MOTHER_NAME").addEventListener("input", function () {
            validateNameInput1("MOTHER_NAME");
        });

        document.getElementById("MOTHER_OCCUPATION").addEventListener("input", function () {
            validateNameInput1("MOTHER_OCCUPATION");
        });
        document.getElementById("BIRTH_PLACE").addEventListener("input", function () {
            validateNameInput1("BIRTH_PLACE");
        });

        document.getElementById("NATIONALITY").addEventListener("input", function () {
            validateNameInput1("NATIONALITY");
        });
        document.getElementById("IDENTIFICATION_MARK").addEventListener("input", function () {
            validateNameInput1("IDENTIFICATION_MARK");
        });
        document.getElementById("CITY").addEventListener("input", function () {
            validateNameInput1("CITY");
        });
        document.getElementById("HOMETOWN").addEventListener("input", function () {
            validateNameInput1("HOMETOWN");
        });
        document.getElementById("COUNTRY").addEventListener("input", function () {
            validateNameInput1("COUNTRY");
        });
        document.getElementById("RelativeName").addEventListener("input", function () {
            validateNameInput1("RelativeName");
        });
        document.getElementById("RelativeUnit").addEventListener("input", function () {
            validateNameInput1("RelativeUnit");
        });
        document.getElementById("RelativePost").addEventListener("input", function () {
            validateNameInput1("RelativePost");
        });
        document.getElementById("RelativePost").addEventListener("input", function () {
            validateNameInput1("RelativePost");
        });
        document.getElementById("RelativeRelation").addEventListener("input", function () {
            validateNameInput1("RelativeRelation");
        });


        function validateNameInput(inputId) {
            var input = document.getElementById(inputId);


            var cleanedValue = input.value.replace(/[^a-zA-Z]/g, '').toUpperCase();


            cleanedValue = cleanedValue.substring(0, 20);

            // Update the input value with the cleaned and truncated value
            input.value = cleanedValue;
        }

        function validateNameInput1(inputId) {
            var input = document.getElementById(inputId);

            // Preserve leading and trailing spaces
            var cleanedValue = input.value.replace(/[^A-Za-z ]/g, '').toUpperCase();

            cleanedValue = cleanedValue.substring(0, 35);

            // Update the input value with cleaned value
            input.value = cleanedValue;
        }




        function validateEmailid() {
            var emailInput = document.getElementById('EMAIL_ID');

            if (emailInput.checkValidity()) {
                // The email is valid
                return true;
            } else {
                // The email is invalid
                alert("Please enter a valid Email Id.");
                return false;
            }
        }

        function validateAlternateEmailid() {
            var emailInput = document.getElementById('ALTERNATE_EMAIL_ID');

            if (emailInput === "") {
                // If the field is empty, do not perform validation
                return true;
            }

            if (emailInput.checkValidity()) {
                // The email is valid
                return true;
            } else {
                // The email is invalid
                alert("Please enter a valid Alternate Email Id.");
                return false;
            }
        }


        function validateDateOfBirth() {
            var dateOfBirth = $("#DATE_OF_BIRTH").val();

            // Add your validation logic here
            // For example, check if the date is not empty
            if (dateOfBirth) {

                return true;
            }
            else {
                alert("please Enter Date Of Birth")
                return false;

            }

            // Additional validation logic can be added as needed

            // If everything is valid, hide the error message and return true
            $("#birthplaceError").hide();
            return true;
        }



        function validateAadharNumber() {
            //Assuming Aadhar card number field has id="aadharNumber"
            var aadharNumber = $('#AADHAR_NO').val();

            //Regular expression for Aadhar card number validation
            var aadharRegex = /^\d{12}$/;

            if (aadharRegex.test(aadharNumber)) {
                // Aadhar card number is valid
                return true;


            } else {
                // Aadhar card number is invalid
                alert('Invalid Aadhar Card Number. Please enter a 12-digit numeric value.');
                return false;
            }
        }
        function validatePincode() {

            var pincodeInput = $('#PINCODE').val();


            var pincode = /^\d{6}$/;

            if (pincode.test(pincodeInput)) {
                //
                return true;


            } else {

                alert('Invalid PIN  Number. Please enter a 06 -digit numeric value.');
                return false;
            }
        }

        function validateMobileNumber() {
            var mobileNumber = $('#MOBILE_NUMBER').val();
            var mobileNumberRegex = /^\d{10}$/;

            if (mobileNumberRegex.test(mobileNumber)) {

                return true;
            } else {
                alert('Please enter a valid 10-digit mobile number.');
                return false;
            }


        }
        function validateAlternateMobileNumber() {
            var mobileNumber = $('#ALTERNATE_NUMBER').val().trim(); // Trim leading and trailing whitespaces
            var mobileNumberRegex = /^\d{10}$/;

            if (mobileNumber === "") {
                // If the field is empty, do not perform validation
                return true;
            }

            if (mobileNumberRegex.test(mobileNumber)) {
                return true;
            } else {
                alert('Please enter a valid 10-digit Alternate mobile number.');
                return false;
            }
        }






        function validateRelativeEmpId() {

            var recEmpid = $('#RelativeEmpId').val();
            var recEmpidRegex = /^\d{6}$/;

            if (recEmpidRegex.test(recEmpid)) {

                return true;


            }
            else {
                alert("Please enter a valid Employee Number.");
                return false;
            }


        }





        document.getElementById("STREET").addEventListener("input", function () {
            validatelocationInput5("STREET");
        });

        document.getElementById("AREA").addEventListener("input", function () {
            validatelocationInput4("AREA");
        });

        document.getElementById("HOUSE_NO").addEventListener("keyup", function () {
            validatelocationInput4("HOUSE_NO");
        });

        document.getElementById("C_ADDRESS").addEventListener("input", function () {
            validatelocationInput5("C_ADDRESS");
        });

        document.getElementById("P_ADDRESS").addEventListener("input", function () {
            validatelocationInput5("P_ADDRESS");
        });





        function validatelocationInput4(inputId) {
            var input = document.getElementById(inputId);


            // Preserve leading and trailing spaces, allowing letters and numbers
            var cleanedValue = input.value.replace(/[^A-Za-z0-9 ]/g, '').toUpperCase();

            cleanedValue = cleanedValue.substring(0, 20);

            // Update the input value with the cleaned value
            input.value = cleanedValue;


        }
        function validatelocationInput5(inputId, errorId) {
            var input = document.getElementById(inputId);


            // Preserve leading and trailing spaces, allowing letters and numbers
            var cleanedValue = input.value.replace(/[^A-Za-z0-9 ]/g, '').toUpperCase();


            cleanedValue = cleanedValue.substring(0, 100);

            // Update the input value with the cleaned value
            input.value = cleanedValue;



        }

        document.getElementById("sameAsPermanent").addEventListener("change", function () {
            if (this.checked) {
                // If checkbox is checked, copy values from permanent address to correspondence address
                document.getElementById("C_ADDRESS").value = document.getElementById("P_ADDRESS").value;
                // Add additional fields if needed
            } else {
                // Clear correspondence address fields
                document.getElementById("C_ADDRESS").value = "";
                // Clear additional fields if needed
            }
        });


        $(document).ready(function () {
            // Function to toggle the style based on the checkbox state
            function toggleAddressStyle() {
                var isSameAsPermanent = $("#sameAsPermanent").is(":checked");

                if (isSameAsPermanent) {
                    // Apply your desired styling when checked
                    $("#C_ADDRESS").addClass("same-as-permanent");
                } else {
                    // Remove the styling when unchecked
                    $("#C_ADDRESS").removeClass("same-as-permanent");
                }
            }

            // Initial call to set the style based on the checkbox state
            toggleAddressStyle();

            // Bind the function to the checkbox change event
            $("#sameAsPermanent").change(function () {
                toggleAddressStyle();
            });
        });

        //document.getElementById("ExApperentice").addEventListener("change", function () {
        //    validateSelect6("ExApperentice");
        //});

        document.getElementById("RegNoEmpExchange").addEventListener("input", function () {
            validatelocationInput6("RegNoEmpExchange");
        });


        function validatelocationInput6(inputId, errorId) {
            var input = document.getElementById(inputId);


            // Preserve leading and trailing spaces, allowing letters and numbers
            var cleanedValue = input.value.replace(/[^A-Za-z0-9 ]/g, '').toUpperCase();


            cleanedValue = cleanedValue.substring(0, 25);

            // Update the input value with the cleaned value
            input.value = cleanedValue;



        }

        document.getElementById("NameEmpExchange").addEventListener("input", function () {
            validateNameInput7("NameEmpExchange");
        });


        function validateNameInput7(inputId) {
            var input = document.getElementById(inputId);

            // Preserve leading and trailing spaces
            var cleanedValue = input.value.replace(/[^A-Za-z ]/g, '').toUpperCase();

            cleanedValue = cleanedValue.substring(0, 20);

            // Update the input value with cleaned value
            input.value = cleanedValue;
        }



        document.getElementById("RegNumberMhrdNats").addEventListener("input", function () {
            validatelocationInput8("RegNumberMhrdNats");
        });

        function validatelocationInput8(inputId, errorId) {
            var input = document.getElementById(inputId);


            // Preserve leading and trailing spaces, allowing letters and numbers
            var cleanedValue = input.value.replace(/[^A-Za-z0-9 ]/g, '').toUpperCase();


            cleanedValue = cleanedValue.substring(0, 25);

            // Update the input value with the cleaned value
            input.value = cleanedValue;



        }
        //document.getElementById("RelativeEmpId").addEventListener("input", function () {
        //    validatemobInput2("RelativeEmpId");
        //});
        //function validatepincodeInput(inputId) {
        //    var input = document.getElementById(inputId);

        //    // Remove non-numeric characters from the input value
        //    var cleanedValue = input.value.replace(/\D/g, '');

        //    cleanedValue = cleanedValue.substring(0, 6);



        //    // Update the input value with cleaned value
        //    input.value = cleanedValue;


        //}


       // let currentTab = 1;

       // // JavaScript to toggle between tabs
       // function openTab(tabName) {
       //     const tabs = document.getElementsByClassName("tab");
       //     for (let i = 0; i < tabs.length; i++) {
       //         tabs[i].style.display = "none";
       //     }

       //     // Remove the active-button class from all tab buttons
       //     const tabButtons = document.getElementsByClassName("tab-button");
       //     for (let i = 0; i < tabButtons.length; i++) {
       //         tabButtons[i].classList.remove("active-button");
       //     }

       //    //  Show the selected tab
       //     const currentTabElement = document.getElementById(tabName);
       //     currentTabElement.style.display = "block";

       //     // Add the active-button class to the clicked tab button
       //     const clickedButton = document.querySelector(`[onclick="openTab('${tabName}')"]`);
       //     clickedButton.classList.add("active-button");

       //     // Check if all inputs in the current tab are filled
       //     const inputsInCurrentTab = currentTabElement.querySelectorAll('input');
       //     const allInputsFilled = Array.from(inputsInCurrentTab).every(input => input.value.trim() !== '');

       //    //  If all inputs are filled, change the button color to green
       //     if (allInputsFilled) {
       //         clickedButton.classList.add("filled-button");
       //     }
       // }
       // // Function to move to the previous tab
       // function previousTab() {
       //     if (currentTab > 1) {
       //         currentTab--;
       //         openTab(`tab${currentTab}`);
       //     }
       // }

       // // Function to move to the next tab
       // function nextTab() {
       //     if (currentTab < 4) {
       //         currentTab++;
       //         openTab(`tab${currentTab}`);
       //         document.getElementById(`tab${currentTab - 1}-button`).classList.remove("active-button");
       //         document.getElementById(`tab${currentTab - 1}-button`).classList.add("completed-button");
       //     }
       // }

       // // Open the first tab by default
       // openTab('tab1');
       ////  here statrt for education dtl

       //let rowCounter = 2; // Initialize the row counter

       // function updateSerialNumbers() {
       //     const serialNumberInputs = document.querySelectorAll(".sno");

       //     // Loop through all serial number inputs and update their values
       //     serialNumberInputs.forEach((input, index) => {
       //         input.value = index + 1;
       //     });
       // }


        //// Function to move to the next tab
        //function nextTab() {
        //    if (currentTab < 4) {
        //        currentTab++;
        //        openTab(`tab${currentTab}`);
        //        document.getElementById(`tab${currentTab - 1}-button`).classList.remove("active-button");
        //        document.getElementById(`tab${currentTab - 1}-button`).classList.add("completed-button");
        //    }
        //}
        //function openTab(tabName) {
        //    const tabs = document.getElementsByClassName("tab");
        //    for (let i = 0; i < tabs.length; i++) {
        //        tabs[i].style.display = "none";
        //    }

        //   //  Remove the active-button class from all tab buttons
        //    const tabButtons = document.getElementsByClassName("tab-button");
        //    for (let i = 0; i < tabButtons.length; i++) {
        //        tabButtons[i].classList.remove("active-button", "filled-button");
        //    }

        //   // Show the selected tab
        //    const currentTabElement = document.getElementById(tabName);
        //    currentTabElement.style.display = "block";

        //     // Add the active-button class to the clicked tab button
        //    const clickedButton = document.querySelector(`[onclick="openTab('${tabName}')"]`);
        //    clickedButton.classList.add("active-button");

        //    // Check if all inputs in the current tab are filled
        //    const inputsInCurrentTab = currentTabElement.querySelectorAll('input');
        //    const allInputsFilled = Array.from(inputsInCurrentTab).every(input => input.value.trim() !== '');

        //     // If all inputs are filled, change the button color to green
        //    if (allInputsFilled) {
        //        clickedButton.classList.add("filled-button");

        //    }

        //}

        //// Function to move to the next tab
        //function nextTab() {
        //    if (currentTab < 4) {
        //        currentTab++;
        //        openTab(`tab${currentTab}`);
        //        document.getElementById(`tab${currentTab - 1}-button`).classList.remove("active-button");
        //        document.getElementById(`tab${currentTab - 1}-button`).classList.add("completed-button");
        //    }
        //}






    let currentTab = 1;


        function areFieldsFilled(tabNumber) {


            const tabId = `tab${tabNumber}`;
            const inputs = document.getElementById(tabId).querySelectorAll("input[type='text'], input[type='email'], select");

            const emptyFields = [];

            for (let i = 0; i < inputs.length; i++) {
                const isAlternateEmail = inputs[i].id === 'ALTERNATE_EMAIL_ID';
                const isAlternateNumber = inputs[i].id === 'ALTERNATE_NUMBER';
               /* const isIffcoEmployee = inputs[i].id === 'IffcoEmployee';*/
             /*   const isRegNumberMhrdNats = inputs[i].id === 'RegNumberMhrdNats';*/
                const isRelativeEmpId = inputs[i].id === 'RelativeEmpId';
                const isRelativeName = inputs[i].id === 'RelativeName';
                const isRelativeUnit = inputs[i].id === 'RelativeUnit';
                const isRelativePost = inputs[i].id === 'RelativePost';
                const isRelativeRelation = inputs[i].id === 'RelativeRelation';
                const isExApperentice = inputs[i].id === 'ExApperentice';
                const isMIDDLE_NAME = inputs[i].id === 'MIDDLE_NAME';
                const istxtLASTNAME = inputs[i].id === 'txtLASTNAME';
                const isRegNoEmpExchange = inputs[i].id === 'RegNoEmpExchange';
                const isNameEmpExchange = inputs[i].id === 'NameEmpExchange';


                // Skip validation for Alternate Email, Alternate Number, and IffcoEmployee fields
                if (isAlternateEmail || isAlternateNumber  || isRelativeEmpId || isRelativeName || isRelativeUnit || isRelativePost || isRelativeRelation || isExApperentice || isMIDDLE_NAME || istxtLASTNAME || isRegNoEmpExchange || isNameEmpExchange) {
                    continue;
                }

                if (inputs[i].nodeName === "SELECT" && inputs[i].selectedIndex === 0) {
                    // Check if it's a select element and the selected index is 0 (default "Select" option)
                    emptyFields.push(inputs[i].id);
                } else if (inputs[i].value.trim() === "") {
                    // Check if it's an input element and the value is empty
                    emptyFields.push(inputs[i].id);
                }
            }


            if (emptyFields.length > 0) {
                const nonNullFields = emptyFields
                    .map(field => document.querySelector(`label[for="${field}"]`))
                    .filter(label => label !== null);

                const emptyFieldsString = nonNullFields.map(label => label.innerText).join(', ');
                alert(`Please fill in all details in ${emptyFieldsString} before proceeding.`);
                return false;
            }

            return true;
        }

        document.addEventListener("DOMContentLoaded", function () {
            // Open the first tab by default
            openTabInitial('tab1');
        });

    function openTabInitial(tabName) {

            var otpFlag = '@Context.Session.GetString("OtpFlag")';
            //var otpFlag = '@ViewBag.OtpFlag';
            /*var otpFlag = $('#otpFlag').val();*/
            if (otpFlag == "I") {

                const currentTab = parseInt(tabName.replace('tab', ''));

                // Check if all previous tabs are filled before moving to the current tab
                for (let i = 1; i < currentTab; i++) {
                    if (!areFieldsFilled(i)) {
                        alert(`Please fill in all details in Tab ${i} before proceeding.`);
                        return;
                    }
                }

                // If the current tab is the last tab, check if it's filled before proceeding
                if (currentTab === 4 && !areFieldsFilled(3)) {
                    alert("Please fill in all details in Tab 3 before proceeding to the last tab.");
                    return;
                }

                // Hide all tabs
                const tabs = document.getElementsByClassName("tab");
                for (let i = 0; i < tabs.length; i++) {
                    tabs[i].style.display = "none";
                }

                // Remove active-button class from all tab buttons
                const tabButtons = document.getElementsByClassName("tab-button");
                for (let i = 0; i < tabButtons.length; i++) {
                    tabButtons[i].classList.remove("active-button");
                }

                // Display the current tab
                document.getElementById(tabName).style.display = "block";

                // Add active-button class to the clicked tab button
                const clickedButton = document.querySelector(`[onclick="openTab('${tabName}')"]`);
                clickedButton.classList.add("active-button");
            }
            else {
                alert("Please verify OTP");
            }
    }

        // Open tab function outside of DOMContentLoaded
    function openTab(tabName) {

        var otpFlag = "";
        var url = window.location.href + '/M1/USERF01/CheckVerifyFlag';
        $.getJSON(url, function (data) {
          
            var flag = data.otpFlagRet;
            otpFlag = flag;
            if (otpFlag == "Y") {

                const currentTab = parseInt(tabName.replace('tab', ''));

                // Check if all previous tabs are filled before moving to the current tab
                for (let i = 1; i < currentTab; i++) {
                    if (!areFieldsFilled(i)) {
                        alert(`Please fill in all details in Tab ${i} before proceeding.`);
                        return;
                    }
                }

                // If the current tab is the last tab, check if it's filled before proceeding
                if (currentTab === 4 && !areFieldsFilled(3)) {
                    alert("Please fill in all details in Tab 3 before proceeding to the last tab.");
                    return;
                }

                // Hide all tabs
                const tabs = document.getElementsByClassName("tab");
                for (let i = 0; i < tabs.length; i++) {
                    tabs[i].style.display = "none";
                }

                // Remove active-button class from all tab buttons
                const tabButtons = document.getElementsByClassName("tab-button");
                for (let i = 0; i < tabButtons.length; i++) {
                    tabButtons[i].classList.remove("active-button");
                }

                // Display the current tab
                document.getElementById(tabName).style.display = "block";

                // Add active-button class to the clicked tab button
                const clickedButton = document.querySelector(`[onclick="openTab('${tabName}')"]`);
                clickedButton.classList.add("active-button");
            }
            else {
                alert("Please verify OTP");
            }
        });


    }




        function togglePreview() {
            var form = document.getElementById("CreateForm");
            var previewContainer = document.getElementById("previewContainer");

            //Clear existing content in the previewContainer
            previewContainer.innerHTML = "";

            //Toggle visibility of form and preview
            form.style.display = form.style.display === "none" ? "block" : "none";
            previewContainer.style.display = previewContainer.style.display === "none" ? "block" : "none";
            var declarationSection; // Declare the variable here
            //If transitioning to preview, update preview values
            if (previewContainer.style.display === "block") {
                // Add heading to the previewContainer
                var heading = document.createElement("h5");
                heading.innerHTML = "Preview Application Form";
                heading.style.textAlign = "center";
                heading.style.color = "blue";  // Set the text color to blue
                heading.style.fontFamily = "Arial, sans-serif";  // Set the font family
                heading.style.fontSize = "24px";  // Set the font size
                heading.style.fontWeight = "bold";  // Set the font weight to bold

                // Add a background color and padding for better appearance
                heading.style.backgroundColor = "#f2f2f2";
                heading.style.padding = "10px";

                previewContainer.appendChild(heading);


                previewContainer.appendChild(document.createElement("hr"));

                var entryCounter = 0;

                //  Function to create and append additional section with entries
                function appendAdditionalSection(entries) {
                    var additionalSection = document.createElement("div");
                    additionalSection.classList.add("row", "form-sm");

                    for (var i = 0; i < entries.length; i++) {
                        var entry = entries[i];
                        var entryDiv = document.createElement("div");
                        entryDiv.classList.add("col-sm-2", "col-md-4");
                        entryDiv.innerHTML = `
                                                        <label for="preview${entry.id}">${entry.label}:</label>
                                                        <span id="preview${entry.id}">${form.elements[entry.id].value}</span>
                                                    `;
                        additionalSection.appendChild(entryDiv);
                    }

                    //Append the additional section to the previewContainer
                    previewContainer.appendChild(additionalSection);

                    // Increment entry counter
                    entryCounter++;

                    //  Check if three entries have been reached
                    if (entryCounter % 14 === 0) {
                        //   Add a horizontal line after every three entries
                        previewContainer.appendChild(document.createElement("hr"));
                    }
                }
                var entriesSet1 = [
                    { id: "txtName", label: "First's Name" },
                    { id: "MIDDLE_NAME", label: "Middle Name" },
                    { id: "txtLASTNAME", label: "Last's Name" }
                ];
                appendAdditionalSection(entriesSet1);

                //Append a horizontal line after every set of entries
                previewContainer.appendChild(document.createElement("hr"));
                // First set of entries
                var entriesSet2 = [
                    { id: "FATHER_NAME", label: "Father's Name" },
                    { id: "FATHER_OCCUPATION", label: "Father's Occupation" },
                    { id: "MOTHER_NAME", label: "Mother's Name" }
                ];

                appendAdditionalSection(entriesSet2);

                //Append a horizontal line after every set of entries
                previewContainer.appendChild(document.createElement("hr"));


                //Second set of entries
                var entriesSet3 = [
                    { id: "MOTHER_OCCUPATION", label: "Mother's Occupation" },
                    { id: "Religion", label: "Religion" },
                    { id: "BIRTH_PLACE", label: "Birth Place" }
                ];

                appendAdditionalSection(entriesSet3);

                //Append a horizontal line after every set of entries
                previewContainer.appendChild(document.createElement("hr"));

                //Third set of entries
                var entriesSet4 = [
                    { id: "GENDER", label: "Gender" },
                    { id: "CATEGORY", label: "Category" },
                    { id: "NATIONALITY", label: "Nationality" }
                ];

                appendAdditionalSection(entriesSet4);

                // Append a horizontal line after every set of entries
                previewContainer.appendChild(document.createElement("hr"));

                var entriesSet5 = [
                    { id: "IDENTIFICATION_MARK", label: "Indentification Marks" },
                    { id: "LandLoser", label: "LandLoser" },
                    { id: "DATE_OF_BIRTH", label: "Date Of Birth" }
                ];

                appendAdditionalSection(entriesSet5);

                //  Append a horizontal line after every set of entries
                previewContainer.appendChild(document.createElement("hr"));

                var entriesSet6 = [
                    { id: "EMAIL_ID", label: "Email Id" },
                    { id: "ALTERNATE_EMAIL_ID", label: "Alternate Email Id" },
                    { id: "AADHAR_NO", label: "Aadhaar No" }
                ];

                appendAdditionalSection(entriesSet6);

                // Append a horizontal line after every set of entries
                previewContainer.appendChild(document.createElement("hr"));

                var entriesSet7 = [
                    { id: "MOBILE_NUMBER", label: "Mobile Number" },
                    { id: "ALTERNATE_NUMBER", label: "Alternate Number" },
                    { id: "MARITAL_STATUS", label: "Marital Status" }
                ];

                appendAdditionalSection(entriesSet7);

                // Append a horizontal line after every set of entries
                previewContainer.appendChild(document.createElement("hr"));


                var entriesSet8 = [
                    { id: "P_ADDRESS", label: "Permanent Address " },
                    { id: "C_ADDRESS", label: "Correspondence Address" },
                    { id: "HOUSE_NO", label: "House No" }
                ];

                appendAdditionalSection(entriesSet8);


                previewContainer.appendChild(document.createElement("hr"));


                var entriesSet9 = [
                    { id: "STREET", label: "Street" },
                    { id: "AREA", label: "Area" }
                    /* { id: "StateName-Create", label: "State Name" }*/
                ];

                appendAdditionalSection(entriesSet9);

                //Append a horizontal line after every set of entries
                previewContainer.appendChild(document.createElement("hr"));

                var entriesSet10 = [
                    /* { id: "DistrictName-Create", label: "District Name" },*/
                    { id: "CITY", label: "City" },
                    { id: "HOMETOWN", label: "Home Town" }
                ];

                appendAdditionalSection(entriesSet10);

                // Append a horizontal line after every set of entries
                previewContainer.appendChild(document.createElement("hr"));

                var entriesSet11 = [
                    { id: "PINCODE", label: "Pin Code" },
                    { id: "COUNTRY", label: "Country" },

                ];

                appendAdditionalSection(entriesSet11);
                //Append a horizontal line after every set of entries
                previewContainer.appendChild(document.createElement("hr"));

                // Assuming educationTableBody is the ID of the tbody in your education table
                var educationTableBody = document.getElementById("educationTableBody");

                // Get all rows inside educationTableBody
                var educationRows = educationTableBody.querySelectorAll(".form-row");
                // Create the heading for education details
                var heading = document.createElement("h5");
                heading.innerHTML = "Education Details";
                heading.style.textAlign = "center";
                heading.style.color = "blue";
                heading.style.fontFamily = "Arial, sans-serif";
                heading.style.fontSize = "24px";
                heading.style.fontWeight = "bold";
                heading.style.backgroundColor = "#f2f2f2";
                heading.style.padding = "10px";

                // Append the heading to the preview container
                previewContainer.appendChild(heading);
                // Create a table element for education details
                var educationTable = document.createElement("table");
                educationTable.border = '1';
                educationTable.cellPadding = '5';
                educationTable.cellSpacing = '0';
                educationTable.style.width = '100%';
                educationTable.style.backgroundColor = 'lightblue';

                // Create the header row
                var headerRow = educationTable.createTHead().insertRow(0);
                var headerLabels = ["S.No", "Course/Degree", "Subjects", "Name Of Board / University", "Year Of Passing(YYYY)", "Roll No", "Marks Obtained", "Total Marks", "Percentage"];

                for (var i = 0; i < headerLabels.length; i++) {
                    var headerCell = document.createElement("th");
                    headerCell.style.fontWeight = 'bold';
                    headerCell.textContent = headerLabels[i];
                    headerRow.appendChild(headerCell);
                }

                // Iterate through educationRows and create table rows
                for (var i = 0; i < educationRows.length; i++) {
                    var educationRow = educationRows[i];
                    var sno = educationRow.querySelector(".sno").value;
                    var qualification = educationRow.querySelector(".qualification").value;
                    var subject = educationRow.querySelector(".subject").value;
                    var nameOfBoard = educationRow.querySelector(".nameOfBoard").value;
                    var yearOfPassing = educationRow.querySelector(".yearOfPassing").value;
                    var rollNo = educationRow.querySelector(".rollNo").value;
                    var marksObtained = educationRow.querySelector(".marksObtained").value;
                    var totalMarks = educationRow.querySelector(".totalMarks").value;
                    var percentage = educationRow.querySelector(".percentage").value;

                    // Append education details to the table
                    var row = educationTable.insertRow(-1);
                    var cells = [
                        row.insertCell(0),
                        row.insertCell(1),
                        row.insertCell(2),
                        row.insertCell(3),
                        row.insertCell(4),
                        row.insertCell(5),
                        row.insertCell(6),
                        row.insertCell(7),
                        row.insertCell(8)
                    ];

                    cells[0].textContent = sno;
                    cells[1].textContent = qualification;
                    cells[2].textContent = subject;
                    cells[3].textContent = nameOfBoard;
                    cells[4].textContent = yearOfPassing;
                    cells[5].textContent = rollNo;
                    cells[6].textContent = marksObtained;
                    cells[7].textContent = totalMarks;
                    cells[8].textContent = percentage;
                }

                // Append the table to the preview container
                previewContainer.appendChild(educationTable);

                previewContainer.appendChild(document.createElement("hr"));
                // ... (previous code)

                // Add a heading for "OTHER DETAILS"
                // Create the heading for education details
                var heading = document.createElement("h5");
                heading.innerHTML = "Other Details";
                heading.style.textAlign = "center";
                heading.style.color = "blue";
                heading.style.fontFamily = "Arial, sans-serif";
                heading.style.fontSize = "24px";
                heading.style.fontWeight = "bold";
                heading.style.backgroundColor = "#f2f2f2";
                heading.style.padding = "10px";

                // Append the heading to the preview container
                previewContainer.appendChild(heading);

                // Add some styling to the "OTHER DETAILS" section
                var otherDetailsSection = document.createElement("div");
                otherDetailsSection.style.padding = "10px"; // Add padding for better appearance
                previewContainer.appendChild(otherDetailsSection);

                var entriesSet12 = [
                    { id: "ExApperentice", label: "EX APPRENTICE" },
                    { id: "RegNoEmpExchange", label: "REG NO EMP EXCHANGE" },
                ];

                // Append a container for entriesSet12
                var entriesSet12Container = document.createElement("div");
                entriesSet12Container.style.padding = "5px"; // Add padding for better appearance
                otherDetailsSection.appendChild(entriesSet12Container);

                // Append entriesSet12 to the container
                appendAdditionalSection(entriesSet12, entriesSet12Container);

                previewContainer.appendChild(document.createElement("hr"));

                var entriesSet13 = [
                    { id: "NameEmpExchange", label: "NAME EMP EXCHANGE" },
                    { id: "RegNumberMhrdNats", label: "REG NUMBER MHRD NATS" }
                ];

                var entriesSet13Container = document.createElement("div");
                entriesSet13Container.style.padding = "5px"; // Add padding for better appearance
                otherDetailsSection.appendChild(entriesSet13Container);

                // Append entriesSet13 to the container
                appendAdditionalSection(entriesSet13, entriesSet13Container);

                previewContainer.appendChild(document.createElement("hr"));





                // Create the heading for education details
                var heading = document.createElement("h5");
                heading.innerHTML = "Relative Details";
                heading.style.textAlign = "center";
                heading.style.color = "blue";
                heading.style.fontFamily = "Arial, sans-serif";
                heading.style.fontSize = "24px";
                heading.style.fontWeight = "bold";
                heading.style.backgroundColor = "#f2f2f2";
                heading.style.padding = "10px";

                // Append the heading to the preview container
                previewContainer.appendChild(heading);

                // Check the value of IffcoEmployee
                var iffcoEmployeeValue = form.elements["IffcoEmployee"].value;

                // Display the preview for IffcoEmployee
                var iffcoEmployeePreview = document.createElement("div");
                iffcoEmployeePreview.innerHTML = `
          <p>
                <span style="color: brown; font-weight: bold;">IF SON/DAUGHTER OF EMPLOYEE OR EX-EMPLOYEE OF IFFCO:</span>
                <span style="color: purple; font-weight: bold;"> ${iffcoEmployeeValue}</span>
            </p>
`;

                // Append the preview for IffcoEmployee to the previewContainer
                previewContainer.appendChild(iffcoEmployeePreview);
                previewContainer.appendChild(document.createElement("hr"));

                // If the value of IffcoEmployee is "YES", show the preview for RELATIVE DETAILS
                if (iffcoEmployeeValue === "YES") {
                    // Get the values from the form
                    var relativeEmpId = form.elements["RelativeEmpId"].value;
                    var relativeName = form.elements["RelativeName"].value;
                    var relativeUnit = form.elements["RelativeUnit"].value;
                    var relativePost = form.elements["RelativePost"].value;
                    var relativeRelation = form.elements["RelativeRelation"].value;

                    // Create a div to contain the colored table
                    var tableContainer = document.createElement("div");
                    tableContainer.classList.add("colored-table-container");

                    // Display the preview for RELATIVE DETAILS with a colored table
                    var relativeDetailsPreview = document.createElement("div");
                    relativeDetailsPreview.innerHTML = `

                <table class="colored-table"  style="color: brown; font-weight: bold;">
                    <thead>
                        <tr>
                            <th>Relative Employee ID</th>
                            <th>Relative Name</th>
                            <th>Relative Unit</th>
                            <th>Relative Post</th>
                            <th>Relative Relation</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td class="colored-cell">${relativeEmpId}</td>
                            <td class="colored-cell">${relativeName}</td>
                            <td class="colored-cell">${relativeUnit}</td>
                            <td class="colored-cell">${relativePost}</td>
                            <td class="colored-cell">${relativeRelation}</td>
                        </tr>
                    </tbody>
                </table>
            `;

                    // Append the colored table preview for RELATIVE DETAILS to the tableContainer
                    tableContainer.appendChild(relativeDetailsPreview);

                    // Append the colored table container to the previewContainer
                    previewContainer.appendChild(tableContainer);
                    previewContainer.appendChild(document.createElement("hr"));
                }




                //Continue adding sets of entries as needed...
                // Creating an "Edit" button
                var editButton = document.createElement("button");
                editButton.innerHTML = "Edit";
                editButton.classList.add("btn", "btn-primary", "btn-lg"); // Add the desired size class
                editButton.style.display = "block"; // Make the button a block element
                editButton.style.margin = "auto"; // Center the button

                // Add an event listener to handle the "Edit" button click
                editButton.addEventListener("click", function () {
                    // Handle the click event to switch back to the form view
                    form.style.display = "block";
                    previewContainer.style.display = "none";
                });

                // Append the "Edit" button to the body
                document.body.appendChild(editButton);

                // Append the "Edit" button to the previewContainer
                previewContainer.appendChild(editButton);
                var editButton = document.createElement("button");
                editButton.innerHTML = "Back to Save";
                editButton.classList.add("btn", "btn-primary", "btn-lg"); // Add the desired size class
                editButton.style.display = "block"; // Make the button a block element
                editButton.style.margin = "auto"; // Center the button

                // Add an event listener to handle the "Edit" button click
                editButton.addEventListener("click", function () {
                    // Handle the click event to switch back to the form view
                    form.style.display = "block";
                    previewContainer.style.display = "none";
                });

                // Append the "Edit" button to the body
                document.body.appendChild(editButton);

                // Append the "Edit" button to the previewContainer
                previewContainer.appendChild(editButton);

                //var printButton = document.createElement("button");
                //printButton.innerText = "Print Data";
                //printButton.classList.add("btn", "btn-primary");
                //printButton.addEventListener("click", printData);

                //previewContainer.appendChild(printButton);



                // Create a container to hold the buttons
                var buttonContainer = document.createElement("div");
                buttonContainer.classList.add("button-container");

                // Append buttons to the container
                buttonContainer.appendChild(editButton);
                //buttonContainer.appendChild(printButton);


                // Append the container to the previewContainer
                previewContainer.appendChild(buttonContainer);

                // Hide the print button before printing
                window.addEventListener("beforeprint", function () {
                    printButton.style.display = "none";
                });

                // Show the print button after printing
                window.addEventListener("afterprint", function () {
                    printButton.style.display = "block";
                });

            }
        }



        //var uploadedFiles = { image: null, pdf: null };

        //$(document).on("change", "#imageFile, #pdfFile", function () {
        //    var inputId = this.id;
        //    var fileType = inputId === "imageFile" ? "image" : "pdf";
        //    var files = document.querySelector("#" + inputId).files;

        //    if (files.length > 0) {
        //        var fileSize = files[0].size;

        //        // Check file size
        //        if (fileSize > 2 * 1024 * 1024) {
        //            Swal.fire({
        //                icon: "error",
        //                title: "Size issue...",
        //                text: "File size must be less than 2MB."
        //            });

        //            /*alert('');*/
        //            $("#" + inputId).val('');
        //            return;
        //        }

        //        var promise = getBase64(files[0]);
        //        promise.then(function (result) {
        //            var comma = result.indexOf(',');
        //            var base64 = result.substr(comma + 1);
        //            var strBase64 = base64;
        //            var fileName = files[0].name;

        //            if (uploadedFiles[fileType]) {
        //                var existingRow = $("#HrmsHrdGrid tbody td:contains('" + fileType + "')").closest('tr');
        //                existingRow.find('td:first').text(fileName);
        //                existingRow.find('td:eq(1)').text(fileSize);
        //                existingRow.find('td:eq(2) input#attachType').val(fileType);
        //                existingRow.find('input#attachFile').val(strBase64);
        //                existingRow.find('i').text('Ready for Upload');

        //                uploadedFiles[fileType] = {
        //                    name: fileName,
        //                    size: fileSize,
        //                    base64: strBase64
        //                };
        //            } else {
        //                if (fileSize > 2 * 1024 * 1024) {

        //                    Swal.fire({
        //                        icon: "error",
        //                        title: "Size issue...",
        //                        text: "File size must be less than 2MB."
        //                    });
        //                    $("#" + inputId).val('');
        //                    return;
        //                }

        //                var trHTML = '<tr>';
        //                trHTML += '<td>' + fileName + '</td>';
        //                trHTML += '<td>' + fileSize + '</td>';
        //                trHTML += '<td><input type="text" readonly id="attachType' + 1 + '" value="' + fileType + '" /></td>';
        //                trHTML += '<td><input type="hidden" id="attachFile" value="' + strBase64 + '" /><i>Ready for Upload</i></td>';
        //                trHTML += '</tr>';
        //                $('#HrmsHrdGrid tbody').append(trHTML);

        //                uploadedFiles[fileType] = {
        //                    name: fileName,
        //                    size: fileSize,
        //                    base64: strBase64
        //                };
        //            }
        //        });
        //    }
        //});

        var uploadedFiles = { image: null, pdf: null };

        $(document).on("change", "#imageFile, #pdfFile", function () {
            var inputId = this.id;
            var fileType = inputId === "imageFile" ? "image" : "pdf";
            var files = document.querySelector("#" + inputId).files;

            if (files.length > 0) {
                var fileSize = files[0].size;

                // Check file size
                if (fileType === "pdf" && fileSize > 5 * 1024 * 1024) {
                    Swal.fire({
                        icon: "error",
                        title: "Size issue...",
                        text: "PDF file size must be less than 5MB."
                    });
                    $("#" + inputId).val('');
                    return;
                }

                // Additional check for all files
                if (fileSize > 2 * 1024 * 1024) {
                    Swal.fire({
                        icon: "error",
                        title: "Size issue...",
                        text: "File size must be less than 2MB."
                    });
                    $("#" + inputId).val('');
                    return;
                }

                var promise = getBase64(files[0]);
                promise.then(function (result) {
                    var comma = result.indexOf(',');
                    var base64 = result.substr(comma + 1);
                    var strBase64 = base64;
                    var fileName = files[0].name;

                    if (uploadedFiles[fileType]) {
                        var existingRow = $("#HrmsHrdGrid tbody td:contains('" + fileType + "')").closest('tr');
                        existingRow.find('td:first').text(fileName);
                        existingRow.find('td:eq(1)').text(fileSize);
                        existingRow.find('td:eq(2) input#attachType').val(fileType);
                        existingRow.find('input#attachFile').val(strBase64);
                        existingRow.find('i').text('Ready for Upload');

                        uploadedFiles[fileType] = {
                            name: fileName,
                            size: fileSize,
                            base64: strBase64
                        };
                    } else {
                        var trHTML = '<tr>';
                        trHTML += '<td>' + fileName + '</td>';
                        trHTML += '<td>' + fileSize + '</td>';
                        trHTML += '<td><input type="text" readonly id="attachType' + 1 + '" value="' + fileType + '" /></td>';
                        trHTML += '<td><input type="hidden" id="attachFile" value="' + strBase64 + '" /><i>Ready for Upload</i></td>';
                        trHTML += '</tr>';
                        $('#HrmsHrdGrid tbody').append(trHTML);

                        uploadedFiles[fileType] = {
                            name: fileName,
                            size: fileSize,
                            base64: strBase64
                        };
                    }
                });
            }
        });



        // Include your getBase64 function and other necessary scripts here



        //$("#PostName-Create").on("change", function () {
        //    debugger;
        //    var selectedOption = $(this).find("option:selected");
        //    var optionValues = selectedOption.val().split(',');

        //    // Update hidden fields
        //    $("#PostAppliedCode").val(optionValues[0]);
        //    $("#RecCode").val(optionValues[1]);

        //    // Serialize form data
        //    var formData = $("form").serialize();

        //    // Make AJAX request
        //    $.ajax({
        //        type: "POST",
        //        url: '/M1/USERF01/AddNewRow',
        //        data: formData,
        //        dataType: "json", // assuming the response is in JSON format
        //        success: function (response) {
        //            debugger;
        //            var data = response.listAtrmsQualificationDtl;

        //            // Clear existing table rows
        //            $('#educationTableBody').empty();

        //            for (var i = 0; i < data.length; i++) {
        //                var markup = '<tr class="form-row">';
        //                markup += '<td><input type="number" class="sno form-control" value="' + data[i].sno + '"></td>';
        //                markup += '<td><input type="text" class="qualification form-control" value="' + data[i].qualification + '"></td>';
        //                markup += '<td><input type="text" class="subject form-control"></td>';
        //                markup += '<td><input type="text" class="nameOfBoard form-control"></td>';
        //                markup += '<td><input type="number" class="yearOfPassing form-control"></td>';
        //                markup += '<td><input type="number" class="marksObtained form-control"></td>';
        //                markup += '<td><input type="number" class="totalMarks form-control"></td>';
        //                markup += '<td><input type="number" class="percentage form-control" readonly></td>';

        //                markup += '</tr>';

        //                $('#educationTableBody').append(markup);
        //            }


        //            updatePercentages();

        //            debugger;

        //            $('#educationTableBody').off('input', '.MarksObtained, .TotalMarks'); // Remove previous handlers
        //            $('#educationTableBody').on('input', '.MarksObtained, .TotalMarks', function () {
        //                var row = $(this).closest('.form-row');
        //                updatePercentageForRow(row);
        //            });

        //        },
        //        error: function (xhr, status, error) {
        //            console.error("AJAX request failed:", status, error);
        //        }
        //    });
        //});




        // Get the select element
        var iffcoEmployeeSelect = document.getElementById("IffcoEmployee");

        // Get the table element
        var relativeTable = document.getElementById("relativeTable");

        // Add an event listener to the select element
        iffcoEmployeeSelect.addEventListener("change", function () {
            // Check if "Yes" is selected
            if (iffcoEmployeeSelect.value === "YES") {
                // Show the table
                relativeTable.style.display = "table";
            } else {
                // Hide the table
                relativeTable.style.display = "none";
            }
        });




        //// JavaScript to display the uploaded image
        //const imageFileInput = document.getElementById('imageFile');
        //const uploadedImage = document.getElementById('uploadedImage');




        //imageFileInput.addEventListener('change', function () {
        //    if (this.files && this.files[0]) {
        //        const reader = new FileReader();
        //        reader.onload = function (e) {
        //            uploadedImage.src = e.target.result;
        //        };
        //        reader.readAsDataURL(this.files[0]);
        //    }
        //});




        $(document).ready(function () {



            $('#StateName-Create');


        });

        function bindddl(val) {

            var StateCd = $("#StateName-" + val).val();

            $.ajax({
                url: window.location.href + '/M1/USERF01/ddl1',
                type: 'get',
                contentType: "application/json;charset=utf-8",
                dataType: "json", // Corrected typo: datatype to dataType
                data: { StateCd: StateCd }, // Include StateName in the data
                async: false,
                success: function (DistrictLOV) {
                    BindDropDown(DistrictLOV, "#DistrictName-" + val)
                    console.log(DistrictLOV);
                },
                error: function () {
                    alert('District not found !!');
                }
            });
        }





        function BindDropDown(data, id) {

            var ddlhtml = "<option>----------Select District----------</option>";
            $.each(data, function (index, ddl) {
                ddlhtml += "<option value=" + ddl.value + ">" + ddl.text + "</option>";
            });
            $(id).html(ddlhtml);
            /* $(id).select2();*/
        }

        function bindddl1(val) {

            var QualCode = $("#HqualName-" + val).val();
            $.ajax({
                url: window.location.href + '/M1/USERF01/ddl2',
                type: 'get',
                contentType: "application/json;charset=utf-8",
                datatype: "json",
                data: { QualCode: QualCode },
                async: false,
                success: function (POSTLOV) {
                    PBindDropDown(POSTLOV, "#PostName-" + val)
                    console.log(POSTLOV);
                },
                error: function () {
                    alert('Post not found !!');
                }
            });
        }





        function PBindDropDown(data, id) {

            var ddlhtml = "<option>----------Select Post----------</option>";
            $.each(data, function (index, ddl) {
                ddlhtml += "<option value=" + ddl.value + ">" + ddl.text + "</option>";
            });
            $(id).html(ddlhtml);
            /* $(id).select2();*/
        }





        // Function to get the base64 representation of a file
        function getBase64(file) {
            return new Promise(function (resolve, reject) {
                var reader = new FileReader();
                reader.readAsDataURL(file);
                reader.onload = function () {
                    resolve(reader.result);
                };
                reader.onerror = reject;
            });
        }

        $(document).ready(function () {



            $('.save').on("click", function () {



                // Replace the condition below with your actual form validation logic
                var validated = validateForm()
                if (validated == true) {
                    showLoadingOverlay();



                    var USERF01ViewModel = JSON.stringify({
                        'objAtrmsPersonalDtl': PersonalDtlArray(),
                        'listAtrmsQualificationDtl': QualificationListArray(),
                        'listAtrmsDocumentsDtlMain': AttachmentListArray()
                    });

                    $.ajax({
                        type: "POST",
                        url: window.location.href + "/M1/USERF01/Create",
                        data: USERF01ViewModel,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json"
                    })
                        .done(function (response) {
                            hideLoadingOverlay();
                            if (response.atId) {
                                // Display a success message with ATID
                                Swal.fire({
                                    icon: "success",
                                    title: "<span style='color: green;'>Congratulations! Your Form has been Successfully Submitted...</span>",
                                    html: "Saved Successfully. Your Registration No Is: <span style='color: green;'>" + response.atId + "</span><br><span style='color: red; font-weight: bold;'>Click On OK Button then Generate Your Application Form</span>"
                                });


                                // Redirect to the index page after a short delay (e.g., 3000 milliseconds)
                                setTimeout(function () {
                                    if (response.report != null) {
                                        GetIndex(response.report);
                                    }
                                    else {
                                        GetIndex('M1/USERF01/Index?AtId=' + response.atId);
                                    }


                                }, 3000);
                            } else {
                                // Display an error message if ATID is not available
                                Swal.fire({
                                    icon: "error",
                                    title: "Error...",
                                    text: response.errorMessage || "Failed to generate ATID. Please try again."
                                });
                            }
                        })


                        .fail(function (xhr, status, error) {
                            console.error(xhr, status, error);

                            var errorMessage = "An error occurred while saving data. Please try again.";

                            if (xhr.responseJSON && xhr.responseJSON.message) {
                                errorMessage = xhr.responseJSON.message;
                            }

                            // Display an error message
                            alert(errorMessage);
                            $('.loading-spinner').hide();
                        });




                }
                else {
                    // If the form is not valid, display an error message
                    alert("Please fill in all required fields before saving.");
                }
            });

            function validateForm() {

                var isValid = true;



                // Validate email
                var emailValidationResult = validateEmailid();
                if (!emailValidationResult) {
                    console.log("emailValidationResult");
                    isValid = false;
                }
                // Validate email
                var emailValidationResult = validateAlternateEmailid();
                if (!emailValidationResult) {
                    console.log("emailValidationResult");
                    isValid = false;
                }


                // Validate Date Of Birth
                var dateOfBirthValidationResult = validateDateOfBirth();
                if (!dateOfBirthValidationResult) {
                    console.log("dateOfBirthValidationResult");
                    isValid = false;
                }

                var aadharValidationResult = validateAadharNumber();
                if (!aadharValidationResult) {
                    console.log("aadharValidationResult");
                    isValid = false;
                }



                // Validate PIN code
                var pincodeValidationResult = validatePincode();
                if (!pincodeValidationResult) {
                    console.log("PIN code validation failed");
                    isValid = false;
                }




                // Validate mobile number
                var mobileValidationResult = validateMobileNumber();
                if (!mobileValidationResult) {
                    console.log("mobileValidationResult");
                    isValid = false;
                }
                // Validate mobile number
                var mobileValidationResult = validateAlternateMobileNumber();
                if (!mobileValidationResult) {
                    console.log("mobileValidationResult");
                    isValid = false;
                }


                // Check if the IffcoEmployee field is filled
                if ($('#IffcoEmployee').val() === 'YES') {

                    var relativeempidResult = validateRelativeEmpId();
                    if (!relativeempidResult) {
                        console.log("relativeempidResult");
                        isValid = false;

                    }
                }


                // Check if the PostName-Create field is filled
                if ($('#imageFile').val() === '') {
                    console.log("imageFile");
                    isValid = false;
                    Swal.fire({
                        icon: 'error',
                        title: 'Validation Error',
                        text: 'Please Upload Image.'
                    });
                    isValid = false;
                }

                if ($('#pdfFile').val() === '') {
                    console.log("pdfFile");
                    isValid = false;
                    Swal.fire({
                        icon: 'error',
                        title: 'Validation Error',
                        text: 'Please Upload Document PDF.'
                    });
                    isValid = false;
                }


                if (!$('#checkcr').prop('checked')) {
                    console.log("checkcr");
                    isValid = false;
                    Swal.fire({
                        icon: 'error',
                        title: 'Validation Error',
                        text: 'Please review the Declaration section and click on the "Check" button.'

                    });
                    isValid = false;
                }




                return isValid;
            }


        });











        // Redirect to the specified URL
        function GetIndex(url) {
            window.location.href = url;
        }

        function PersonalDtlArray() {
            IDs = {}

            IDs.unitCode = $('#UnitCode').val();
            IDs.postAppliedDescription = $('#PostName-Create').val();
            IDs.postAppliedCode = $('#PostAppliedCode').val();
            IDs.recCode = $('#RecCode').val();
            IDs.qualification = $('#HqualName-Create').val();
            IDs.atId = $('#AT_ID').val();
            IDs.firstName = $('#txtName').val();
            IDs.middleName = $('#MIDDLE_NAME').val();
            IDs.lastName = $('#txtLASTNAME').val();
            IDs.fatherName = $('#FATHER_NAME').val();
            IDs.fatherOccupation = $('#FATHER_OCCUPATION').val();
            IDs.motherName = $('#MOTHER_NAME').val();
            IDs.motherOccupation = $('#MOTHER_OCCUPATION').val();
            IDs.religion = $('#Religion').val();
            IDs.landLoser = $('#LandLoser').val();
            IDs.dateOfBirth = $('#DATE_OF_BIRTH').val();
            IDs.birthPlace = $('#BIRTH_PLACE').val();
            IDs.gender = $('#GENDER').val();
            IDs.nationality = $('#NATIONALITY').val();
            IDs.category = $('#CATEGORY').val();
            IDs.identificationMark = $('#IDENTIFICATION_MARK').val();
            IDs.aadharNo = $('#AADHAR_NO').val();
            IDs.emailId = $('#EMAIL_ID').val();
            IDs.alternateEmailId = $('#ALTERNATE_EMAIL_ID').val();
            IDs.mobileNumber = $('#MOBILE_NUMBER').val();
            IDs.alternateNumber = $('#ALTERNATE_NUMBER').val();
            IDs.maritalStatus = $('#MARITAL_STATUS').val();
            IDs.cAddress = $('#C_ADDRESS').val();
            IDs.pAddress = $('#P_ADDRESS').val();
            IDs.houseNo = $('#HOUSE_NO').val();
            IDs.street = $('#STREET').val();
            IDs.area = $('#AREA').val();
            IDs.state = $('#StateName-Create').val();
            IDs.district = $('#DistrictName-Create').val();
            IDs.city = $('#CITY').val();
            IDs.hometown = $('#HOMETOWN').val();
            IDs.pincode = $('#PINCODE').val();
            IDs.country = $('#COUNTRY').val();
            IDs.exApperentice = $('#ExApperentice').val();
            IDs.regNoEmpExchange = $('#RegNoEmpExchange').val();
            IDs.nameEmpExchange = $('#NameEmpExchange').val();
            IDs.mhrdNats = $('#MhrdNats').val();
            IDs.iffcoEmployee = $('#IffcoEmployee').val();
            IDs.regNumberMhrdNats = $('#RegNumberMhrdNats').val();
            IDs.relativeEmpId = $('#RelativeEmpId ').val();
            IDs.relativeName = $('#RelativeName').val();
            IDs.relativeUnit = $('#RelativeUnit').val();
            IDs.relativePost = $('#RelativePost').val();
            IDs.relativeRelation = $('#RelativeRelation ').val();
            IDs.submitDate = $('#txtSubmitDate').val();


            return IDs
        }

        function QualificationListArray() {
            var qualifications = [];

            $("#educationTableBody .form-row").each(function () {
                var row = $(this);

                var qualification = {
                    sno: row.closest('tr').find('.Sno').val(),
                    qualification: row.closest('tr').find('.Qualification').val(),
                    subject: row.closest('tr').find('.Subject').val(),
                    nameOfBoard: row.closest('tr').find('.NameOfBoard').val(),
                    yearOfPassing: row.closest('tr').find('.YearOfPassing').val(),
                    rollNo: row.closest('tr').find('.RollNo').val(),
                    marksObtained: row.closest('tr').find('.MarksObtained').val(),
                    totalMarks: row.closest('tr').find('.TotalMarks').val(),
                    percentage: row.closest('tr').find('.Percentage').val()
                };


                qualifications.push(qualification);
            });

            updatePercentages();

            return qualifications;
        }
        function AttachmentListArray() {
            var IDs = new Array();
            $("#HrmsHrdGrid TBODY TR").each(function () {
                var row = $(this);

                var type = row.find('td:eq(3) i').text();
                if (type.includes("Ready")) {
                    var uploadFile = {};
                    uploadFile.fileName = $('#FIRST_NAME').val();
                    //uploadFile.atId = $('#AT_ID').val();
                    uploadFile.name = row.find('td:eq(0)').html();
                    uploadFile.fileSize = row.find('td:eq(1)').text(); // Corrected this line
                    uploadFile.mimeType = row.find('td:eq(2) input').val();
                    uploadFile.uploadFile = row.find('td:eq(3) input').val();

                    IDs.push(uploadFile);
                }
            });
            console.log(IDs);

            return IDs;
        }


        //function AttachmentListArray() {
        //    var IDs = new Array();
        //    $("#HrmsHrdGrid TBODY TR").each(function () {
        //        var row = $(this);
        //        debugger;
        //        var type = row.find('td:eq(3)').text();
        //        if (type.includes("Ready")) {
        //            var uploadFile = {};
        //            uploadFile.fileName = $('#FIRST_NAME').val();
        //            //uploadFile.atId = $('#AT_ID').val();
        //            uploadFile.name = row.find('td:eq(0)').html();
        //            uploadFile.fileSize = row.find('td:eq(1) input').val();
        //            uploadFile.mimeType = row.find('td:eq(2) input').val();
        //            uploadFile.uploadFile = row.find('td:eq(3) input').val();


        //            IDs.push(uploadFile);
        //        }
        //    });
        //    console.log(IDs)

        //    return IDs
        //}

        function validateInput(inputField, regex) {
            // Get the current value of the input field
            var inputValue = inputField.value;

            // Remove any non-alphabetic and non-allowed symbols
            var cleanedValue = inputValue.replace(regex, '');

            // Update the input field value with the cleaned value
            inputField.value = cleanedValue;
        }

        $("#PostName-Create").on("change", function () {


            var selOption = $(this).val();
            //console.log(selOption);
            var arr = selOption.split(',');
            var a = arr[0];
            var b = arr[1];
            //console.log(a);
            //console.log(b);

            var selectedOption = $(this).find("option:selected");

            // Split the value of the selected option by comma
            var optionValues = selectedOption.val().split(',');

            // Update the hidden fields with the selected values
            $("#PostAppliedCode").val(a);
            $("#RecCode").val(b);

            // Serialize form data
            var formData = $("form").serialize();

            // Make AJAX request
            $.ajax({
                type: "POST",
                url: window.location.href + '/M1/USERF01/AddNewRow',
                data: formData,
                dataType: "json",
                success: function (response) {

                    var data = response.listAtrmsQualificationDtl;

                    // Clear existing table rows
                    $('#educationTableBody').empty();

                    for (var i = 0; i < data.length; i++) {
                        var markup = '<tr class="form-row">';
                        markup += '<td><input type="number" class="sno form-control" value="' + data[i].sno + '"readonly></td>';
                        markup += '<td><input type="text" class="qualification form-control" value="' + data[i].qualification + '"readonly></td>';
                        markup += '<td><input type="text" class="subject form-control" style="width: 200px;" oninput="validateSubject(this)"></td>';

                        markup += '<td><input type="text" class="nameOfBoard form-control" style="width: 100px;"  oninput="validateNameOfBoard(this)"></td>';
                        markup += '<td>';

                        if (data[i].qualification === '10TH' || data[i].qualification === '12TH') {
                            // If qualification is '10TH' or '12TH', show only manual input for the year

                            
                            markup += '<input type="text" class="yearOfPassing form-control" placeholder="Enter year" required maxlength="4" oninput="this.value = this.value.replace(/[^0-9]/g, \'\');">';



                        } else {
                            // For other qualifications, show the select dropdown
                            markup += '<select class="yearOfPassing form-control">';
                            // Add a default "--select--" option
                            markup += '<option value="">--select--</option>';
                            // Show specific years for other qualifications
                            for (var year = (data[i].qualification === 'DIPLOMA' ? 2019 : 2021); year <= (data[i].qualification === 'DIPLOMA' ? 2023 : 2023); year++) {
                                markup += '<option value="' + year + '">' + year + '</option>';
                            }
                            markup += '</select>';
                        }

                        markup += '</td>';
                        markup += '<td><input type="text" class="rollNo form-control" style="width: 150px;" oninput="validateRollNo(this)"></td>';


                        //markup += '<td><input type="number " class="marksObtained form-control" ></td>';
                        markup += '<td><input type="text" class="marksObtained form-control" oninput="this.value = this.value.replace(/[^0-9]/g, \'\');" ></td>';
                        markup += '<td><input type="text" class="totalMarks form-control" oninput="this.value = this.value.replace(/[^0-9]/g, \'\');"></td>';
                        //markup += '<td><input type="text" class="totalMarks form-control" ></td>';
                        markup += '<td><input type="number" class="percentage form-control" readonly></td>';
                        markup += '</tr>';

                        $('#educationTableBody').append(markup);
                    }

                    // Update percentages after adding rows
                    updatePercentages();

                },
                error: function (xhr, status, error) {
                    console.error("AJAX request failed:", status, error);
                }
            });
        });



        //function validateYearOfPassing(input) {
        //    var year = input.value;
        //    if (!(/^\d{4}$/.test(year))) {
        //        console.error("Year of Passing must be a 4-digit number.");
        //        input.value = ""; // Clear the input field
        //    }
        //}




    function validateRollNo(input) {



        // Preserve leading and trailing spaces, allowing letters and numbers
        var cleanedValue = input.value.replace(/[^A-Za-z0-9 ]/g, '').toUpperCase();


        cleanedValue = cleanedValue.substring(0, 25);

        // Update the input value with the cleaned value
        input.value = cleanedValue;
    }




    //function validateRollNo(input) {
    //    var sanitizedValue = input.value.toUpperCase().replace(/[^0-9A-Z]/g, '');
    //    if (sanitizedValue.length > 25) {
    //        sanitizedValue = sanitizedValue.slice(0, 15);
    //    }
    //    input.value = sanitizedValue;
    //}

        function validateSubject(input) {
            // Allow uppercase letters, commas, and spaces
            var cleanedValue = input.value.replace(/[^a-zA-Z, ]/g, '').toUpperCase();

            cleanedValue = cleanedValue.substring(0, 80);
            // Update the input value with cleaned value
            input.value = cleanedValue;
        }


     function validateSubject(input) {
            // Allow uppercase letters, commas, and spaces
            var cleanedValue = input.value.replace(/[^a-zA-Z, ]/g, '').toUpperCase();

            cleanedValue = cleanedValue.substring(0, 80);
            // Update the input value with cleaned value
            input.value = cleanedValue;
     }



        function validateNameOfBoard(input) {
            // Allow uppercase letters, commas, and spaces
            var cleanedValue = input.value.replace(/[^a-zA-Z ]/g, '').toUpperCase();

            cleanedValue = cleanedValue.substring(0, 50);

            // Update the input value with cleaned value
            input.value = cleanedValue;
        }



        // Event delegation for dynamically added elements
        $('#educationTableBody').on('change', '.marksObtained, .totalMarks', function () {
            var row = $(this).closest('.form-row');
            updatePercentageForRow(row);
        });

        function calculatePercentage(row) {
            var marksObtained1 = row.find('.marksObtained').val();
            var totalMarks1 = row.find('.totalMarks').val();
            var qualification = row.find('.qualification').val();
            var category = $('#CATEGORY').val();

            // Validate input
            if (!marksObtained1 || !totalMarks1 || isNaN(parseFloat(marksObtained1)) || isNaN(parseFloat(totalMarks1))) {
                return 0;
            }

            var marksObtained = parseFloat(marksObtained1) || 0;
            var totalMarks = parseFloat(totalMarks1) || 1; // Avoid division by zero

            if (totalMarks <= marksObtained) {
                showError("Total marks should be greater than marks obtained.", row);
                return 0;
            }

            if (marksObtained < 0) {
                showError("Marks obtained cannot be negative.", row);
                return 0;
            }

            // Create FormData and append additional form data
            var formData = new FormData();
            formData.append('marksObtained', marksObtained);
            formData.append('totalMarks', totalMarks);
            formData.append('qualification', qualification);
            formData.append('category', category);

            $.ajax({
                type: "POST",
                url: window.location.href + "/M1/USERF01/CalculatePercentage",
                contentType: false,
                processData: false,
                data: formData,
                success: function (result) {
                    if (result.success) {
                        row.find('.percentage').val(result.percentage.toFixed(2));
                    } else {
                        showError(result.message, row);
                    }
                },
                error: function () {
                    showError("An error occurred while calculating percentage.", row);
                }
            });
        }

        function showError(message, row) {
            // Implement your error handling logic, e.g., displaying an error message to the user
            console.error(message);
        }


        // You might want to handle the case where Obtlength < 3 or Totlength < 3

        // return isNaN(percentage) ? 0 : percentage.toFixed(2);


        function showError(message, row) {
            Swal.fire({
                icon: "error",
                title: "Error...",
                text: message
            });
            row.find('.marksObtained').val('');
            row.find('.totalMarks').val('');
            row.find('.percentage').val('');
        }





        function updatePercentageForRow(row) {
            var percentage = calculatePercentage(row);
            row.find('.percentage').val(percentage);
        }

        function updatePercentages() {
            $("#educationTableBody .form-row").each(function () {
                updatePercentageForRow($(this));
            });
        }




        const currentDate = new Date().toISOString().split('T')[0];

        // Set the current date as the default value for the input field
        document.getElementById('txtSubmitDate').value = currentDate;


        //function updateDateRange() {
        //    var category = $("#CATEGORY").val();
        //    var dateInput = $("#DATE_OF_BIRTH");
        //    var isLandLooser = $("#LandLoser").val() === "YES";
        //    debugger;
        //    // Reset the dateInput value to an empty string
        //    dateInput.val('');



        //    //ajax
        //    //receive date min and max.
        //    //var mindate = new Date(data.minDate);
        //    // dateInput.attr("min", data.minDate);
        //    // dateInput.attr("max", data.maxDate);


        //    switch (category) {
        //        case "General":
        //            if (isLandLooser) {
        //                dateInput.attr("min", "1992-09-30");
        //                dateInput.attr("max", "2004-09-30");
        //            } else {
        //                dateInput.attr("min", "1995-09-30");
        //                dateInput.attr("max", "2004-09-30");
        //            }
        //            break;
        //        case "OBC":
        //            if (isLandLooser) {
        //                dateInput.attr("min", "1989-09-30");
        //                dateInput.attr("max", "2004-10-01");
        //            } else {
        //                dateInput.attr("min", "1992-09-30");
        //                dateInput.attr("max", "2004-10-01");
        //            }
        //            break;
        //        case "SC":
        //            if (isLandLooser) {
        //                dateInput.attr("min", "1987-09-30");
        //                dateInput.attr("max", "2004-10-01");
        //            } else {
        //                dateInput.attr("min", "1990-09-30");
        //                dateInput.attr("max", "2004-10-01");
        //            }
        //            break;
        //        case "ST":
        //            if (isLandLooser) {
        //                dateInput.attr("min", "1987-09-30");
        //                dateInput.attr("max", "2004-10-01");
        //            } else {
        //                dateInput.attr("min", "1990-09-30");
        //                dateInput.attr("max", "2004-10-01");
        //            }
        //            break;
        //        case "OTHER":
        //            if (isLandLooser) {
        //                dateInput.attr("min", "1987-09-30");
        //                dateInput.attr("max", "2004-10-01");
        //            } else {
        //                dateInput.attr("min", "1990-09-30");
        //                dateInput.attr("max", "2004-10-01");
        //            }
        //            break;


        //    }
        //}

        //function updateDateRange(row) {
        //    var category = $("#CATEGORY").val();
        //    var isLandLooser = $("#LandLoser").val();

        //    debugger;
        //    // Check if both category and isLandLooser are not empty
        //    if (category && isLandLooser) {
        //        // Create FormData and append additional form data
        //        var formData = new FormData();
        //        formData.append('Category', category);
        //        formData.append('LandLoser', isLandLooser);

        //        $.ajax({
        //            type: "POST",
        //            url: window.location.href + "/M1/USERF01/updateDateRange",
        //            contentType: false,
        //            processData: false,
        //            data: formData,
        //            success: function (result) {
        //                if (result.success) {
        //                    debugger;
        //                    var MinDate = new Date(result.dateOfBirthData.minDate);
        //                    var year = MinDate.getFullYear();
        //                    var month = MinDate.getMonth();
        //                    month = month + 1;
        //                    if (month < 10) {
        //                        month = "0" + month.toString();
        //                    }
        //                    var day = MinDate.getDate();
        //                    if (day < 10) {
        //                        day = "0" + day.toString();
        //                    }
        //                    var Min = year.toString() + "-" + month + "-" + day.toString();


        //                    var MaxDate = new Date(result.dateOfBirthData.maxDate);

        //                    var year = MaxDate.getFullYear();
        //                    var month = MaxDate.getMonth();
        //                    month = month + 1;
        //                    if (month < 10) {
        //                        month = "0" + month.toString();
        //                    }
        //                    var day = MaxDate.getDate();
        //                    if (day < 10) {
        //                        day = "0" + day.toString();
        //                    }
        //                    var Max = year.toString() + "-" + month + "-" + day.toString();
        //                    $("#DATE_OF_BIRTH").attr("max", Max);
        //                    $("#DATE_OF_BIRTH").attr("min", Min);
        //                } else {
        //                    showError(result.message, row);
        //                }
        //            },
        //            error: function (error) {
        //                showError("An error occurred while getting the date of birth data.", row);
        //            }
        //        });
        //    } else {
        //        // Handle the case when category or isLandLooser is empty
        //        showError("Please provide both category and land looser values.", row);
        //    }
        //}

        function updateDateRange(row) {
            var category = $("#CATEGORY").val();
            var isLandLooser = $("#LandLoser").val();
            $("#DATE_OF_BIRTH").val('');

            // Create FormData and append additional form data
            var formData = new FormData();
            formData.append('Category', category);
            formData.append('LandLoser', isLandLooser);

            $.ajax({
                type: "POST",
                url: window.location.href + "/M1/USERF01/updateDateRange",
                contentType: false,
                processData: false,
                data: formData,
                success: function (result) {
                    if (result.success) {

                        var MinDate = new Date(result.dateOfBirthData.minDate);
                        var year = MinDate.getFullYear();
                        var month = MinDate.getMonth();
                        month = month + 1;
                        if (month < 10) {
                            month = "0" + month.toString();
                        }
                        var day = MinDate.getDate();
                        if (day < 10) {
                            day = "0" + day.toString();
                        }
                        var Min = year.toString() + "-" + month + "-" + day.toString();


                        var MaxDate = new Date(result.dateOfBirthData.maxDate);

                        var year = MaxDate.getFullYear();
                        var month = MaxDate.getMonth();
                        month = month + 1;
                        if (month < 10) {
                            month = "0" + month.toString();
                        }
                        var day = MaxDate.getDate();
                        if (day < 10) {
                            day = "0" + day.toString();
                        }
                        var Max = year.toString() + "-" + month + "-" + day.toString();
                        $("#DATE_OF_BIRTH").attr("max", Min);
                        $("#DATE_OF_BIRTH").attr("min", Max);
                    } else {
                        showError(result.message, row);
                    }
                },
                error: function (error) {
                    showError("An error occurred while getting the date of birth data.", row);
                }
            });
        }


        //function ageMatching(row) {

        //    var category = $("#CATEGORY").val();
        //    var isLandLooser = $("#LandLoser").val();
        //    var dateOfBirth = $("#DATE_OF_BIRTH").val();

        //    debugger;
        //    // Create FormData and append additional form data
        //    var formData = new FormData();
        //    formData.append('category', category);
        //    formData.append('LandLoser', isLandLooser);
        //    formData.append('dob', dateOfBirth);

        //    $.ajax({
        //        type: "POST",
        //        url: window.location.href + "/M1/USERF01/ageMatching",
        //        contentType: false,
        //        processData: false,
        //        data: formData,
        //        success: function (result) {
        //            if (result.success) {

        //                // Process the result if needed
        //            } else {
        //                showError(result.message, row);
        //            }
        //        },
        //        error: function (error) {
        //            showError("An error occurred while getting the date of birth data.", row);
        //        }
        //    });
        //}
        // Add an event listener to the date of birth input field
        document.getElementById("DATE_OF_BIRTH").addEventListener("change", function () {
            // Get values of category and LandLoser
            var category = document.getElementById("CATEGORY").value;
            var LandLoser = document.getElementById("LandLoser").value;
            var dob = this.value; // Get the entered date of birth

            // Trigger AJAX call
            $.ajax({
                url: window.location.href + "/M1/USERF01/ageMatching", // Replace with the actual URL of your controller action
                type: 'POST',
                dataType: 'json',
                data: {
                    category: category,
                    LandLoser: LandLoser,
                    dob: dob
                },
                success: function (response) {
                    // Handle the response
                    if (response.success) {
                        // Update UI based on response data
                        // For example, you can access dateOfBirthData from response
                        console.log(response.dateOfBirthData);
                    } else {
                        // Handle error case
                        console.error(response.message);
                        // Clear the date of birth input field
                        document.getElementById("DATE_OF_BIRTH").value = "";
                        // Display error message through an alert
                        alert(response.message);
                    }
                },
                error: function (xhr, status, error) {
                    // Handle AJAX error
                    console.error(error);
                    // Clear the date of birth input field
                    document.getElementById("DATE_OF_BIRTH").value = "";
                    // Display error message through an alert
                    alert("Your Age not Matched.");
                }
            });
        });



        $("#LandLoser", "#CATEGORY").change(function () {
            updateDateRange();
        });



        // Reset button functionality For image reset on screeen
        $(document).on("click", "#resetButton", function () {
            // Clear file inputs
            $("#imageFile, #pdfFile").val('');

            // Clear uploaded files data
            uploadedFiles = { image: null, pdf: null };

            // Clear the table
            $("#HrmsHrdGrid tbody").empty();
        });



        function printData() {
            // Clone the previewContainer to avoid modifying the original content
            var printContent = previewContainer.cloneNode(true);

            // Remove the print button from the cloned content
            var printButton = printContent.querySelector("button");
            if (printButton) {
                printButton.remove();
            }

            // Create a new window for printing
            var printWindow = window.open("", "_blank");
            if (printWindow) {
                // Append the cloned content to the new window
                printWindow.document.body.appendChild(printContent);

                // Trigger the print function for the new window
                printWindow.print();
            }
        }


        function updateDateOfBirth() {

            var category = document.getElementById("CATEGORY").value;
            var landLoser = document.getElementById("LandLoser").value;
            var dateOfBirthInput = document.getElementById("DATE_OF_BIRTH");

            if (category !== "" && landLoser !== "") {
                // Both Category and LandLoser are selected, enable Date of Birth input
                dateOfBirthInput.removeAttribute("disabled");
            } else {
                // Either Category or LandLoser is not selected, disable Date of Birth input
                dateOfBirthInput.setAttribute("disabled", "true"); // or use an empty string: dateOfBirthInput.setAttribute("disabled", "");
            }
        }





        // Attach the updateDateOfBirth function to the change events of Category and LandLoser select elements
        document.getElementById("CATEGORY").addEventListener("change", updateDateOfBirth);
        document.getElementById("LandLoser").addEventListener("change", updateDateOfBirth);

        // Call the function initially
        updateDateOfBirth();



        $(document).ready(function () {
            // Disable keyboard input on date input field
            $("#DATE_OF_BIRTH").on("keydown", function (e) {
                e.preventDefault();
            });
        });



</script>

